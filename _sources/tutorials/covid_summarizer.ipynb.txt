{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-04-03T09:51:23.612246Z",
     "start_time": "2020-04-03T09:51:23.608710Z"
    }
   },
   "source": [
    "<font size=24>COVID-19 summarizer</font>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## TO DO : \n",
    "\n",
    "* Problem with visualizer : upper cases prevent the words to be colorised\n",
    "* biaising : \n",
    "* change size of generic query depending on the scores of words ? test the auto_k\n",
    "* SpaCy for lemmatization\n",
    "* data loader fileSource à mettre en place ici\n",
    "* réparer problème used_sentences"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# The COVID-19 dataset\n",
    "## Get the dataset\n",
    "The dataset can be downloaded from [Kaggle website](https://www.kaggle.com/allen-institute-for-ai/CORD-19-research-challenge) by clicking the Download (4 GB) button once registered. You'll get a zip of ~750Mo.\n",
    "\n",
    "Please define the absolute path of the uncompressed archive to run the rest of the notebook:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-09-30T07:23:59.099908Z",
     "start_time": "2020-09-30T07:23:59.096354Z"
    },
    "init_cell": true
   },
   "outputs": [],
   "source": [
    "DATASET_DIR = \"/home/melanie/git/newdle/datasets/CORD19_research_challenge\"\n",
    "#DATASET_DIR = \"/home/mando/git/gitolite/newdle/datasets/CORD19_research_challenge\""
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Load the dataset"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The following functions can be used to load the dataset and extract some attributes of the loaded documents. For abstract, we only keep the first element of the list exposed by Kaggle, as most of time the next elements are not abstract (e.g. keywords, copyright, etc.)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-09-30T07:24:00.492357Z",
     "start_time": "2020-09-30T07:23:59.102290Z"
    },
    "init_cell": true,
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "from summarizer.data_loader import load_dataset"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Tokenizer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-08-21T13:22:03.221635Z",
     "start_time": "2020-08-21T13:22:03.208539Z"
    },
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['decimal numbers like 0.50 and .com are they a problem ?',\n",
      " 'Or Fig. or (Fig. 273) or ( Fig.3) ?',\n",
      " \"Because i.e. shoudn't cut a sentence e.g. here.\",\n",
      " 'And if I talk abour M. Cambus or Dr. Who, will it cut ?']\n"
     ]
    }
   ],
   "source": [
    "from pprint import pprint\n",
    "from summarizer.tokenizer import make_sentences, words\n",
    "\n",
    "blabla = \"decimal numbers like 0.50 and .com are they a problem ? Or Fig. or (Fig. 273) or ( Fig.3) ? Because i.e. shoudn't cut a sentence e.g. here. And if I talk abour M. Cambus or Dr. Who, will it cut ?\"\n",
    "sentences = make_sentences(blabla)\n",
    "pprint(sentences)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Summarizing using Gismo\n",
    "## Installation steps"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We now try to design a simple summarizer by using Gismo, made by [Fabien Mathieu](mailto:fabien.mathieu@nokia-bell-labs.com).\n",
    "\n",
    "Gismo can be installed as follows:\n",
    "1. If you don't have yet a ssh key, create it.\n",
    "\n",
    "```\n",
    "sudo apt update\n",
    "sudo apt install ssh\n",
    "ssh-keygen -t rsa -b 2048\n",
    "```\n",
    "\n",
    "2. The previous command makes a public key `~/.ssh/id_rsa.pub` and a private key `~/.ssh/id_rsa`. The private key must always stay on your personal computer(s) and never be shared. Send by email your public ssh key `~/.ssh/id_rsa.pub` to [Fabien Mathieu](mailto:fabien.mathieu@nokia-bell-labs.com) or [Marc-Olivier Buob](mailto:marc-olivier.buob@nokia-bell-labs.com).\n",
    "3. Once you've access to the repository, run:\n",
    "\n",
    "```\n",
    "sudo apt install git\n",
    "mkdir ~/git\n",
    "cd ~/git\n",
    "ssh-add\n",
    "git clone gitolite3@git.lincs.fr:gismo.git\n",
    "cd gismo\n",
    "sudo python3 setup.py install\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Summarizing a corpus of documents\n",
    "\n",
    "* __Goal:__ Summarizing a corpus of documents by using Gismo.\n",
    "* __Inputs:__ The abstracts of the documents.\n",
    "* __Parameters:__\n",
    "  * $\\alpha \\in [0,1]$ the D-iteration damping factor, which is a Gismo parameter. This indicates if we stay close to the document(s) matching the query or if we explore further.\n",
    "  * `q` the string searched by the user, corresponding to the user query.\n",
    "  * `num_documents` $\\in \\mathbb{N}^*$ the number of top-documents used to build the summary.\n",
    "  * `num_sentences` the number of sentences in the output summary.\n",
    "* __Output:__ A string summarizing the whole corpus (using only abstracts at the moment).\n",
    "\n",
    "This summarizer works as follows:\n",
    "1. Get the `num_documents`-top documents. Build the corresponding set of sentences.\n",
    "2. Get the `num_sentences`-top sentences from this set. Thus, each sentences is mapped to a `document_ranking` and its local `sentence_ranking`.\n",
    "3. Build the summary by contenating these best sentences and sort them according to the `(document_ranking, sentence_ranking)` lexical order."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Experiments"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### loading dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-09-30T07:24:00.496164Z",
     "start_time": "2020-09-30T07:24:00.493871Z"
    },
    "init_cell": true
   },
   "outputs": [],
   "source": [
    "NUM_DOCUMENTS = 10000\n",
    "NUM_SENTENCES = 5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-09-30T07:24:01.986568Z",
     "start_time": "2020-09-30T07:24:00.497995Z"
    },
    "init_cell": true,
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "dict_keys(['title', 'abstract', 'content', 'url', 'lang'])\n",
      "6740\n"
     ]
    }
   ],
   "source": [
    "from summarizer.language_filtering   import guess_language\n",
    "from summarizer.simplified_documents import get_abstract, make_content_doc\n",
    "from pprint import pprint\n",
    "\n",
    "RAW_DOCUMENTS = load_dataset(DATASET_DIR, max_documents = NUM_DOCUMENTS)\n",
    "pprint(RAW_DOCUMENTS[0].keys())\n",
    "# DOCUMENTS : with abstracts and in english only\n",
    "\n",
    "DOCUMENTS = [\n",
    "    document\n",
    "    for document in RAW_DOCUMENTS\n",
    "    if (document[\"abstract\"] != \"\") \\\n",
    "    #and (document[\"lang\"] == \"en\") \\\n",
    "    #and (guess_language(document[\"abstract\"]) == \"en\")\n",
    "    and (document[\"lang\"] == \"en\")\n",
    "]\n",
    "\n",
    "print(len(DOCUMENTS))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "When loading 100 documents, there are 36 documents left out : \n",
    "* 34 of them don't have abstracts (the summaries of these precise documents cannot be evaluates, if summarizing the document's abstracts these documents are not taken into account)\n",
    "* 2 documents are in spanish (one with a spanish content and the other just with a spanish abstract, has to be deleted because we take abstract as reference summaries)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Stop-words"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "getting a list of english stopwords to give it to the embedding when first initialized in order to rank documents with a general embedding. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "`sudo python3 -m spacy download en_core_web_sm` needs to be done before using spacy (using gensim and bert)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-09-30T07:24:02.177653Z",
     "start_time": "2020-09-30T07:24:01.988013Z"
    },
    "init_cell": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING:smart_open.transport:unable to import 'smart_open.gcs', disabling that module\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "337\n"
     ]
    }
   ],
   "source": [
    "from pprint import pprint \n",
    "\n",
    "# We use gensim stop words so the comparision with our summarizer makes sense\n",
    "from gensim.parsing.preprocessing import STOPWORDS\n",
    "EN_STOP_WORDS = list(STOPWORDS) #+ [\"words\", \"summarized\", \"focusing\", \"simultaneously\", \"decision\",\n",
    "#    \"sufficiently\", \"feedback\", \"optimum\", \"approach\", \"respondents\", \"preferred\", \"selecting\",\n",
    "#    \"formulations\", \"empirically\", \"existing\", \"stock\", \"returns\", \"weeks\", \"collected\", \"paired\",\n",
    "#    \"evidenced\", \"homogeneous\", \"enped\", \"terminated\", \"repeated\", \"recorded\",\n",
    "#    \"concentrated\", \"left\", \"day\", \"end\", \"items\", \"obervation\", \"obervations\", \"field\", \"multiplied\",\n",
    "#    \"faster\", \"satisfactory\",\"place\", \"versus\", \"information\", \"minimize\", \"proper\", \"utilize\", \"strongest\",\n",
    "#    \"utilize\", \"self\", \"susceptible\", \"delay\", \"suspicion\", \"exceeded\", \"delays\", \"asked\", \"strongly\",\n",
    "#    \"prevent\", \"past\", \"advice\", \"waiting\", \"aimed\", \"utilization\", \"knowing\", \"process\", \"served\", \"accurate\",\n",
    "#    \"spite\", \"introducing\", \"rest\", \"uniform\", \"von\", \"coordinating\", \"supposed\", \"deduced\", \"rapid\",\n",
    "#    \"heightened\", \"realistic\", \"suspected\", \"confirmation\", \"traced\", \"historically\", \"remote\", \"performs\",\n",
    "#    \"improves\", \"normal\", \"ratio\", \"noted\", \"declining\", \"raised\", \"vs\", \"years\", \"aged\"]\n",
    "pprint(len(EN_STOP_WORDS))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The list of stopwords might have to be ajusted"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Initializing the embedding without lemmatization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-09-30T07:24:02.181961Z",
     "start_time": "2020-09-30T07:24:02.179192Z"
    },
    "init_cell": true,
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "#from summarizer.gismo_wrapper      import initialize_embedding, sanitize_text, simplified_document_to_string\n",
    "#from summarizer.language_filtering import EN_STOP_WORDS\n",
    "#\n",
    "#print(DOCUMENTS[0].keys())\n",
    "#\n",
    "## Too long, needs to be changed\n",
    "#CLEAN_DOCUMENTS = [\n",
    "#    {\n",
    "#        \"title\" : sanitize_text(document[\"title\"]),\n",
    "#        \"abstract\" : sanitize_text(document[\"abstract\"]),\n",
    "#        \"content\" : sanitize_text(document[\"content\"])\n",
    "#    }\n",
    "#    for document in DOCUMENTS\n",
    "#]\n",
    "#\n",
    "#EMBEDDING = initialize_embedding(\n",
    "#    documents = CLEAN_DOCUMENTS, \n",
    "#    stop_words = EN_STOP_WORDS,\n",
    "#    document_to_text = simplified_document_to_string,\n",
    "#    min_df = 5\n",
    "#)\n",
    "##print(EMBEDDING.features)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Initializing the embedding with lemmatization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-09-30T07:24:29.656974Z",
     "start_time": "2020-09-30T07:24:02.184381Z"
    },
    "init_cell": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "dict_keys(['title', 'abstract', 'content', 'url', 'lang'])\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/melanie/.local/lib/python3.6/site-packages/spacy/util.py:275: UserWarning: [W031] Model 'en_core_web_sm' (2.2.5) requires spaCy v2.2 and is incompatible with the current spaCy version (2.3.2). This may lead to unexpected results or runtime errors. To resolve this, download a newer compatible model or retrain your custom model with the current spaCy version. For more details and available updates, run: python -m spacy validate\n",
      "  warnings.warn(warn_msg)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "12.704887000000003\n"
     ]
    }
   ],
   "source": [
    "from summarizer.gismo_wrapper      import initialize_embedding, sanitize_text, simplified_document_to_string\n",
    "from summarizer.language_filtering import EN_STOP_WORDS\n",
    "from gismo import Embedding, Corpus\n",
    "\n",
    "print(DOCUMENTS[0].keys())\n",
    "\n",
    "# Too long, needs to be changed\n",
    "CLEAN_DOCUMENTS = [\n",
    "    {\n",
    "        \"title\" : sanitize_text(document[\"title\"]),\n",
    "        \"abstract\" : sanitize_text(document[\"abstract\"]),\n",
    "        \"content\" : sanitize_text(document[\"content\"])\n",
    "    }\n",
    "    for document in DOCUMENTS\n",
    "]\n",
    "\n",
    "import spacy\n",
    "# Initialize spacy 'en' model, keeping only tagger component needed for lemmatization\n",
    "nlp_emb = spacy.load('en_core_web_sm', disable=['parser', 'ner'])\n",
    "nlp_emb.max_length = 2000000\n",
    "# Who cares about DET and such?\n",
    "#keep = {'ADJ', 'NOUN', 'NUM', 'PROPN', 'SYM', 'VERB'}\n",
    "preprocessor = lambda txt: \" \".join([token.lemma_.lower()\\\n",
    "                                   for token in nlp_emb(txt) if not token.is_stop]) \n",
    "                                     #if token.pos_ in keep and not token.is_stop])\n",
    "\n",
    "\n",
    "import time\n",
    "start_time = time.clock()\n",
    "\n",
    "#EMBEDDING = Embedding(filename=\"embedding_covid_lemmas\", path=\"\")\n",
    "EMBEDDING = initialize_embedding(\n",
    "    CLEAN_DOCUMENTS,\n",
    "    EN_STOP_WORDS,\n",
    "    document_to_text = simplified_document_to_string,\n",
    "    min_df = 5,\n",
    "    #preprocessor = preprocessor\n",
    ")\n",
    "print(time.clock()-start_time)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-09-30T07:24:29.660879Z",
     "start_time": "2020-09-30T07:24:29.659151Z"
    },
    "init_cell": true
   },
   "outputs": [],
   "source": [
    "#import tempfile\n",
    "#\n",
    "#with tempfile.TemporaryDirectory() as tmpdirname:\n",
    "#    EMBEDDING.save(filename=\"embedding_covid_lemmas\", path=\"\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-09-30T07:24:29.671484Z",
     "start_time": "2020-09-30T07:24:29.662934Z"
    },
    "init_cell": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "44932\n"
     ]
    }
   ],
   "source": [
    "VOCABULARY = set(EMBEDDING.features)\n",
    "pprint(len(VOCABULARY))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-09-30T07:24:29.679542Z",
     "start_time": "2020-09-30T07:24:29.674272Z"
    },
    "init_cell": true
   },
   "outputs": [],
   "source": [
    "def remove_duplicates(data :list) -> list:\n",
    "    seen = set()\n",
    "    unique_data = []\n",
    "    for x in data:\n",
    "        if x not in seen:\n",
    "            unique_data.append(x)\n",
    "            seen.add(x)\n",
    "    return unique_data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Summarization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-09-30T07:24:30.378327Z",
     "start_time": "2020-09-30T07:24:29.681323Z"
    },
    "init_cell": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/lib/python3.6/importlib/_bootstrap.py:219: RuntimeWarning: spacy.morphology.Morphology size changed, may indicate binary incompatibility. Expected 104 from C header, got 112 from PyObject\n",
      "  return f(*args, **kwds)\n",
      "/usr/lib/python3.6/importlib/_bootstrap.py:219: RuntimeWarning: spacy.vocab.Vocab size changed, may indicate binary incompatibility. Expected 96 from C header, got 112 from PyObject\n",
      "  return f(*args, **kwds)\n",
      "/home/melanie/.local/lib/python3.6/site-packages/spacy/util.py:275: UserWarning: [W031] Model 'en_core_web_sm' (2.2.5) requires spaCy v2.2 and is incompatible with the current spaCy version (2.3.2). This may lead to unexpected results or runtime errors. To resolve this, download a newer compatible model or retrain your custom model with the current spaCy version. For more details and available updates, run: python -m spacy validate\n",
      "  warnings.warn(warn_msg)\n"
     ]
    }
   ],
   "source": [
    "#from summarizer.building_summary import summarize\n",
    "\n",
    "%run ./idf_embedding.ipynb\n",
    "\n",
    "import spacy\n",
    "import neuralcoref\n",
    "import numpy as np\n",
    "import re\n",
    "import time \n",
    "\n",
    "nlp = spacy.load(\"en_core_web_sm\")\n",
    "try:\n",
    "    neuralcoref.add_to_pipe(nlp)\n",
    "except ValueError:\n",
    "    print(\"neuralcoref already in spacy pipeline\")\n",
    "\n",
    "from gismo                       import Gismo\n",
    "from gismo.common                import auto_k\n",
    "from gismo.embedding             import Embedding\n",
    "from sklearn.metrics.pairwise    import cosine_similarity\n",
    "from summarizer.building_summary import is_relevant_sentence, RE_CITATION, RE_URL\n",
    "from summarizer.gismo_wrapper    import make_gismo\n",
    "from summarizer.tokenizer        import make_sentences, num_words\n",
    "\n",
    "def is_relevant_sentence(sentence :str, min_num_words :int = 2, max_num_words :int = 60) -> bool:\n",
    "    n = num_words(sentence) \n",
    "    #parsed_sentence = nlp(sentence)\n",
    "    return (\n",
    "        min_num_words <= n\n",
    "        and n <= max_num_words\n",
    "        and re.search(RE_CITATION, sentence) is None\n",
    "        and re.search(RE_URL, sentence) is None\n",
    "    #    and \"VBZ\" in {token.tag_ for token in parsed_sentence}\n",
    "    )\n",
    "\n",
    "def summarize(\n",
    "    documents          :list,\n",
    "    query              :str       = \"\",\n",
    "    num_documents      :int       = None,\n",
    "    num_sentences      :int       = None,\n",
    "    ratio              :float     = 0.05, \n",
    "    embedding          :Embedding = None,\n",
    "    is_documents_embedding :bool  = False,\n",
    "    num_keywords       :int       = 15,\n",
    "    size_generic_query :int       = 5,\n",
    "    used_sentences     :set       = None,\n",
    "    filter_sentences              = is_relevant_sentence,\n",
    "    get_content                   = lambda x: x[\"content\"] + x[\"abstract\"],\n",
    "    weight_s           :float     = 1,\n",
    "    itf                :bool      = True,\n",
    "    covering           :bool      = False,\n",
    "    sim_to_query       :bool      = False,\n",
    "    query_distortion   :bool      = True,\n",
    "    length_textrank    :int       = None, \n",
    "    target_auto_k      :float     = 1.0,\n",
    "    post               :bool      = False\n",
    ") -> tuple:\n",
    "    \"\"\"\n",
    "    Extended summarizer that produces a list of sentences and a list of keywords. \n",
    "    Args:\n",
    "        documents: A list of dict corresponding to documents.\n",
    "        query: A string.\n",
    "        num_documents: An int corresponding to the number of top documents\n",
    "                        to be taking into account for the summary. \n",
    "        num_sentences: An int corresponding of the number of sentences wanted in the summary.\n",
    "        ratio: A float in [0, 1] giving the length of the summary\n",
    "                as a proportion of the length of the num_documents kept. \n",
    "        embedding: An Embedding fitted on a bigger corpus than documents.\n",
    "        num_keywords: An int corresponding to the number of keywords returned\n",
    "        used_sentences: A set of \"forbidden\" sentences.\n",
    "        filter_sentences: A function returning a bool, allowing the selection of a sentence. \n",
    "        get_content: A function that allows the retrieval of a document's content. \n",
    "    Returns:\n",
    "        A tuple containing:\n",
    "            A list of the summary sentences,\n",
    "            A list of keywords. \n",
    "    \"\"\"\n",
    "    assert num_sentences or ratio\n",
    "    assert type(documents) == list\n",
    "    \n",
    "    if used_sentences is None:\n",
    "        used_sentences = set()\n",
    "    \n",
    "    # Get number of documents\n",
    "    if num_documents is None:\n",
    "        num_documents = len(documents)\n",
    "    # Find best documents\n",
    "    start_time = time.clock()\n",
    "    assert num_documents != 0\n",
    "    if num_documents == 1:\n",
    "        best_documents = [documents[0]]\n",
    "    else:\n",
    "        documents_gismo = make_gismo(\n",
    "            documents = documents,\n",
    "            other_embedding = embedding,\n",
    "            is_documents_embedding = is_documents_embedding\n",
    "        )\n",
    "        documents_gismo.rank(query)\n",
    "        best_documents = documents_gismo.get_documents_by_rank(k = num_documents)  \n",
    "        if query == \"\":\n",
    "            query = \" \".join(documents_gismo.get_features_by_rank(k = size_generic_query))\n",
    "    print(\"finding best documents : \", time.clock() - start_time)\n",
    "    # Split best document into sentences.\n",
    "    start_time = time.clock()\n",
    "    contents_sentences = [\n",
    "        sentence\n",
    "        for document in best_documents\n",
    "        for sentence in make_sentences(get_content(document))\n",
    "    ]\n",
    "    print(\"Splitting best docs in sentences : \", time.clock() - start_time)\n",
    "    # Scale the number of sentences proportionally to the total number\n",
    "    # of sentences in the top documents.\n",
    "    if num_sentences is None:\n",
    "        num_sentences = max(int(ratio * len(contents_sentences)), 1)\n",
    "        \n",
    "    streching_for_duplicates = 7\n",
    "    if itf == False:\n",
    "        start_time = time.clock()\n",
    "        embedding_idf = IdfEmbedding()\n",
    "        embedding_idf.fit_ext(embedding)\n",
    "        embedding_idf.transform(Corpus(contents_sentences, lambda document: document))\n",
    "        sentences_gismo = make_gismo(\n",
    "            contents_sentences,\n",
    "            other_embedding = embedding_idf,\n",
    "            document_to_text = lambda document: document,\n",
    "            is_documents_embedding = True\n",
    "        )\n",
    "        print(\"creating idf sentences_gismo : \", time.clock() - start_time)\n",
    "    else:\n",
    "        start_time = time.clock()\n",
    "        sentences_gismo = make_gismo(\n",
    "            contents_sentences,\n",
    "            other_embedding = embedding,\n",
    "            document_to_text = lambda document: document\n",
    "        )\n",
    "        print(\"creating itf sentences_gismo : \", time.clock() - start_time)\n",
    "    \n",
    "#    print(\"Preparing sentence-based gismo\")\n",
    "    start_time = time.clock()\n",
    "    sentences_gismo.rank(query)\n",
    "    keywords = sentences_gismo.get_features_by_rank(k = num_keywords)\n",
    "    \n",
    "    if size_generic_query == None:\n",
    "        size_generic_query = auto_k(\n",
    "            sentences_gismo.diteration.y_relevance,\n",
    "            max_k = len(sentences_gismo.diteration.y_relevance),\n",
    "            target = target_auto_k\n",
    "        )\n",
    "    \n",
    "    #if auto_k: query = sentences_gismo.get_features_by_rank\n",
    "    if query == \"\" or query is None:\n",
    "        query = \" \".join(keywords[:size_generic_query])\n",
    "        sentences_gismo.rank(query)\n",
    "    print(\"ranking sentences : \", time.clock() - start_time)\n",
    "    \n",
    "    if post == False:\n",
    "        return sentences_gismo.get_documents_by_rank(k = num_sentences)\n",
    "# MMR\n",
    "    if weight_s < 1:\n",
    "        start_time = time.clock()\n",
    "        if sim_to_query == False:\n",
    "            sentences_dict = [\n",
    "                {\n",
    "                    \"index\"                : i,\n",
    "                    \"sentence\"             : contents_sentences[i],\n",
    "                    \"score\"                : sentences_gismo.diteration.x_relevance[i],\n",
    "                    \"vector\"               : sentences_gismo.embedding.x.getrow(i),\n",
    "                    \"sim_to_sum\"           : 0,\n",
    "                    \"current_score\"        : sentences_gismo.diteration.x_relevance[i],\n",
    "        #            \"sim_to_sum_sentences\" : list()\n",
    "                }\n",
    "                for i in range(len(contents_sentences))\n",
    "                if is_relevant_sentence(contents_sentences[i]) and \\\n",
    "                (contents_sentences[i] not in used_sentences)\n",
    "            ]\n",
    "        else:# If score is similarity to query\n",
    "            query_vector = embedding.query_projection(query)[0]\n",
    "            sentences_dict = [\n",
    "                {\n",
    "                    \"index\"                : i,\n",
    "                    \"sentence\"             : contents_sentences[i],\n",
    "                    \"score\"                : cosine_similarity(\n",
    "                        embedding.query_projection(contents_sentences[i])[0],\n",
    "                        query_vector\n",
    "                    ),\n",
    "                    \"vector\"               : embedding.query_projection(contents_sentences[i])[0],\n",
    "                    \"sim_to_sum\"           : 0,\n",
    "                    \"current_score\"        : cosine_similarity(\n",
    "                        embedding.query_projection(contents_sentences[i])[0],\n",
    "                        query_vector\n",
    "                    )\n",
    "                }\n",
    "                for i in range(len(contents_sentences))\n",
    "                if is_relevant_sentence(contents_sentences[i]) and\\\n",
    "                    (contents_sentences[i] not in used_sentences)\n",
    "            ]\n",
    "        if len(sentences_dict) == 0: # None of the sentences are relevant (too short)!\n",
    "            return \"\"\n",
    "        sorted_sentences_dict = sorted(\n",
    "            sentences_dict,\n",
    "            key = lambda k: k[\"score\"],\n",
    "            reverse = True\n",
    "        )[:streching_for_duplicates* 2 * num_sentences]\n",
    "\n",
    "        summary = list()\n",
    "        new_sentence_dict = sorted_sentences_dict[0]\n",
    "        while len(summary) < streching_for_duplicates * num_sentences:\n",
    "            summary.append(new_sentence_dict)\n",
    "            sorted_sentences_dict.remove(new_sentence_dict)\n",
    "            try:\n",
    "                for sentence_dict in sorted_sentences_dict:\n",
    "                    sim_to_new_sentence = cosine_similarity(sentence_dict[\"vector\"],\\\n",
    "                                                            new_sentence_dict[\"vector\"])\n",
    "    #                sentence_dict[\"sim_to_sum_sentences\"].append(sim_to_new_sentence)\n",
    "                    if sim_to_new_sentence > sentence_dict[\"sim_to_sum\"]:\n",
    "                        sentence_dict[\"sim_to_sum\"] = sim_to_new_sentence\n",
    "                        sentence_dict[\"current_score\"] = \\\n",
    "                            weight_s * sentence_dict[\"score\"] - (1 - weight_s) * sentence_dict[\"sim_to_sum\"]\n",
    "                new_sentence_dict = max(sorted_sentences_dict, key=lambda x:x[\"current_score\"])\n",
    "            except (IndexError, ValueError):\n",
    "                print(\"not enough sentences to get to the required length\")\n",
    "                break\n",
    "        print(\"Filtering and MMR : \", time.clock() - start_time)\n",
    "    elif covering == False:# Gloutton\n",
    "        if sim_to_query == True: # Sim to query Gloutton\n",
    "            query_vector = embedding.query_projection(query)[0]\n",
    "            summary = sorted(\n",
    "                [\n",
    "                    {\n",
    "                        \"sentence\" : contents_sentences[i],\n",
    "                        \"index\"    : i,\n",
    "                        \"score\"    : cosine_similarity(\n",
    "                            embedding.query_projection(contents_sentences[i])[0],\n",
    "                            query_vector\n",
    "                        )\n",
    "                    }\n",
    "                    for i in range(len(contents_sentences))\n",
    "                    if is_relevant_sentence(contents_sentences[i]) and\\\n",
    "                        (contents_sentences[i] not in used_sentences)\n",
    "                ],\n",
    "                key = lambda k: k[\"score\"],\n",
    "                reverse = True\n",
    "            )[:(streching_for_duplicates * num_sentences)]\n",
    "        else: # Gismo Gloutton\n",
    "            start_time = time.clock()\n",
    "            summary = [\n",
    "                {\n",
    "                    \"sentence\" : sentence,\n",
    "                    \"index\"    : contents_sentences.index(sentence)\n",
    "                }\n",
    "                for sentence in sentences_gismo.get_documents_by_rank(k = 10 * num_sentences)\n",
    "                if is_relevant_sentence(sentence) and (sentence not in used_sentences)\n",
    "            ][:streching_for_duplicates * num_sentences]\n",
    "            print(\"Filtering and Gloutton : \", time.clock() - start_time)\n",
    "    else: # Covering == True\n",
    "        sentences_gismo.query_distortion = query_distortion\n",
    "        sentences_gismo.parameters.strech = 1\n",
    "        sentences_gismo.parameters.wide = True\n",
    "        summary = [\n",
    "            {\n",
    "                \"sentence\" : sentence,\n",
    "                \"index\"    : contents_sentences.index(sentence)\n",
    "            }\n",
    "            for sentence in sentences_gismo.get_documents_by_coverage(k = (10 * num_sentences))\n",
    "            if is_relevant_sentence(sentence) and (sentence not in used_sentences)\n",
    "        ][:streching_for_duplicates * num_sentences]\n",
    "\n",
    "    # Removing adverbs and nominal sentences, pronoun resolution\n",
    "    start_time = time.clock()\n",
    "    sentences_to_remove = list()\n",
    "    for (sum_index, sentence_dict) in enumerate(summary):\n",
    "        sentence = nlp(sentence_dict[\"sentence\"])\n",
    "        if sentence[0].pos_ == \"ADV\":\n",
    "            if sentence[1].pos_ == \"PUNCT\":\n",
    "                sentence = sentence[2:]\n",
    "            else:\n",
    "                sentence = sentence[1:]\n",
    "            sentence_dict[\"sentence\"] = sentence.text\n",
    "        if \"VBZ\" not in {token.tag_ for token in sentence}:            \n",
    "            #summary.remove(sentence_dict)\n",
    "            sentences_to_remove.append(sentence_dict)\n",
    "        if \"PRP\" in {token.tag_ for token in sentence}:#elif si VBZ ici\n",
    "            i = int(sentence_dict[\"index\"])\n",
    "            extract_str = \" \".join([sentence for sentence in contents_sentences[i - 2 : i + 1]])\n",
    "            extract = nlp(extract_str)\n",
    "            if extract._.has_coref:\n",
    "                resolved_extract = extract._.coref_resolved\n",
    "                sentence_dict[\"sentence\"] = make_sentences(resolved_extract)[-1]\n",
    "    print(\"coreference resolution and deleting adverbs : \", time.clock() - start_time)\n",
    "    # Ordering the sentences given the similarities\n",
    "#    ll_sims = np.array([np.array(sentence_dict[\"sim_to_sum_sentences\"]) for sentence_dict in summary])\n",
    "#    pprint(ll_sims)\n",
    "#    couples = list()\n",
    "#    for i in range(len(summary) - 1):\n",
    "#        ind1, ind2 = np.unravel_index(np.argmax(ll_sims, axis=None), ll_sims.shape)\n",
    "#        couples.append(ind1 + 1, ind1)\n",
    "#    pprint(couples)\n",
    "\n",
    "    summary = [sentence for sentence in summary if (sentence not in sentences_to_remove)]\n",
    "\n",
    "    if length_textrank == None:\n",
    "        return [sentence_dict[\"sentence\"] for sentence_dict in summary[:num_sentences]]#, keywords)\n",
    "    else:\n",
    "        sentences_to_return = list()\n",
    "        cpt = 0\n",
    "        while len(\"\".join(sentences_to_return)) < length_textrank and cpt < len(summary):\n",
    "            sentences_to_return.append(summary[cpt][\"sentence\"])\n",
    "            cpt += 1\n",
    "        return sentences_to_return\n",
    "\n",
    "#    return sentences_gismo.get_documents_by_rank(k = num_sentences)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-08-21T13:36:52.779551Z",
     "start_time": "2020-08-21T13:36:52.729241Z"
    },
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "finding best documents :  0.0032810000000154105\n",
      "Splitting best docs in sentences :  0.027730000000019572\n",
      "creating itf sentences_gismo :  0.0131059999999934\n",
      "ranking sentences :  0.0018650000000093314\n",
      "['Strains were classified as vaccine strains, when genetically identical or '\n",
      " 'closely related (p-distance < 0.01) to one of the applied vaccines, '\n",
      " 'vaccine-derived strains, when genetically identical or closely related to a '\n",
      " 'vaccine not administered in the respective flock, or field strains when not '\n",
      " 'closely related (p-distance > 0.01) to any known vaccine.',\n",
      " 'Of the 9 QX detections, 3 vaccine strains were detected in QX-vaccinated '\n",
      " 'flocks, 2 were labeled as vaccine-derived strains, and 4 as field ones.',\n",
      " 'In all 72.8% of the 4/91 detections occurred in farms not adopting this '\n",
      " 'vaccine, as opposed to 6.4% and none of the 1/96 and CR88 detections: the '\n",
      " 'significant difference (P-value < 0.001) suggests a higher spreading '\n",
      " 'capability of the 4/91 vaccine compared to the 1/96based one, as previously '\n",
      " 'reported (Franzo et al., 2014; Pellattiero et al., 2018) .',\n",
      " 'The number of vaccine-derived and field strains detected in symptomatic '\n",
      " 'flocks is substantially equal, and this should stimulate a discussion on the '\n",
      " 'advantages and disadvantages of a widespread, poorly-planned vaccine '\n",
      " 'application.',\n",
      " 'Variant 2 strains were detected in 84 samples: 26 were classified as '\n",
      " 'vaccine, 8 as vaccine-derived, and 51 as field strains, highlighting the '\n",
      " 'persistence of this lineage in Poland in the considered period.']\n"
     ]
    }
   ],
   "source": [
    "test_summary = summarize(\n",
    "    documents = DOCUMENTS,\n",
    "    num_documents = 5,\n",
    "    query = \"vaccine\",\n",
    "    num_sentences = 5,\n",
    "    embedding = EMBEDDING,\n",
    "    is_documents_embedding = True,\n",
    "    covering = False,\n",
    "    itf = True,\n",
    "    post = False\n",
    ")\n",
    "pprint(test_summary)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-08-21T13:36:52.824783Z",
     "start_time": "2020-08-21T13:36:52.781615Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "finding best documents :  0.007463999999970383\n",
      "Splitting best docs in sentences :  0.007588999999995849\n",
      "creating idf sentences_gismo :  0.003551000000015847\n",
      "ranking sentences :  0.0010580000000004475\n",
      "finding best documents :  0.006241999999986092\n",
      "Splitting best docs in sentences :  0.008902000000034604\n",
      "creating itf sentences_gismo :  0.004147999999986496\n",
      "ranking sentences :  0.0007830000000126347\n",
      "False\n"
     ]
    }
   ],
   "source": [
    "test_idf = summarize(\n",
    "    documents = [DOCUMENTS[0]],\n",
    "    query = \"\",\n",
    "    ratio = 0.05,\n",
    "    num_documents = 10,\n",
    "    embedding = EMBEDDING,\n",
    "    itf = False\n",
    ")\n",
    "test_itf = summarize(\n",
    "    documents = [DOCUMENTS[0]],\n",
    "    query = \"\",\n",
    "    ratio = 0.05,\n",
    "    num_documents = 10,\n",
    "    embedding = EMBEDDING,\n",
    "    itf = True\n",
    ")\n",
    "print(test_idf == test_itf)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Evaluation of the summaries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-09-30T07:24:30.388049Z",
     "start_time": "2020-09-30T07:24:30.379993Z"
    },
    "init_cell": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "array([4191,    1, 5508, 4807, 4563, 6221, 5538, 4568, 5159, 4371, 2337,\n",
      "       2095, 6399, 5717, 3555, 5595, 4451, 6274, 6309,   99, 5019,  742,\n",
      "       3802, 5413, 3671, 3873,  449, 1485,  253, 1835, 3882, 3164, 4785,\n",
      "       6111, 1843, 2856, 1740, 4422, 4930, 5571,   97,  181, 2043, 5264,\n",
      "       1428, 6272, 6530, 2855, 1590, 6315, 3231, 1564, 2754, 5505, 5111,\n",
      "       1736, 6166, 1081, 3809, 6145, 6281, 5566, 6043, 6650, 4010, 3517,\n",
      "       1704, 4145, 4522, 1641, 2804, 4097, 3067,  553,  397, 1092, 6557,\n",
      "       1577, 3858, 3687, 1504, 1638, 2141, 1766, 3652, 5113, 2896, 6435,\n",
      "       6419,  959, 1874, 3189, 6382, 2610, 5660, 5783, 6295, 5148, 4875,\n",
      "       5986])\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import time\n",
    "from pprint import pprint\n",
    "from summarizer.simplified_documents import get_abstract\n",
    "# To get the time : time.clock()\n",
    "\n",
    "#rand_indexes = np.random.randint(low = 0, high = len(DOCUMENTS), size = 100)\n",
    "\n",
    "rand_indexes = np.array([4191,    1, 5508, 4807, 4563, 6221, 5538, 4568, 5159, 4371, 2337,\n",
    "2095, 6399, 5717, 3555, 5595, 4451, 6274, 6309,   99, 5019,  742,\n",
    "3802, 5413, 3671, 3873,  449, 1485,  253, 1835, 3882, 3164, 4785,\n",
    "6111, 1843, 2856, 1740, 4422, 4930, 5571,   97,  181, 2043, 5264,\n",
    "1428, 6272, 6530, 2855, 1590, 6315, 3231, 1564, 2754, 5505, 5111,\n",
    "1736, 6166, 1081, 3809, 6145, 6281, 5566, 6043, 6650, 4010, 3517,\n",
    "1704, 4145, 4522, 1641, 2804, 4097, 3067,  553,  397, 1092, 6557,\n",
    "1577, 3858, 3687, 1504, 1638, 2141, 1766, 3652, 5113, 2896, 6435,\n",
    "6419,  959, 1874, 3189, 6382, 2610, 5660, 5783, 6295, 5148, 4875,\n",
    "5986])\n",
    "\n",
    "pprint(rand_indexes)\n",
    "\n",
    "DOC_LIST = [DOCUMENTS[i] for i in rand_indexes]\n",
    "ABSTRACTS = [DOCUMENTS[i][\"abstract\"] for i in rand_indexes]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Tuning parameters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-08-21T13:36:53.207921Z",
     "start_time": "2020-08-21T13:36:53.201697Z"
    },
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "#import numpy as np\n",
    "#from summarizer.measures import cosine_sim, extended_jaccard, make_scores\n",
    "#\n",
    "#def make_gismo_summaries(contents_docs :list, abstracts :list, target_auto_k :float) -> list:\n",
    "#    summaries = list()\n",
    "#    for (index_d, document) in enumerate(contents_docs):\n",
    "#        abstract = abstracts[index_d]\n",
    "#        our_hypothesis = \" \".join(summarize(\n",
    "#            documents = [document],\n",
    "#            query = \"\",\n",
    "#            num_sentences = NUM_SENTENCES,\n",
    "#            size_generic_query = None,\n",
    "#            target_auto_k = target_auto_k\n",
    "#        ))\n",
    "#        \n",
    "#        summaries.append(\n",
    "#            {\n",
    "#                \"ref_sum\" : abstract,\n",
    "#                \"our_sum\" : our_hypothesis,\n",
    "#            }\n",
    "#        )\n",
    "#    return summaries\n",
    "#\n",
    "#right_value = 0\n",
    "#max_means = 0\n",
    "#for k in range(1, 5):\n",
    "#    summaries = make_gismo_summaries(DOC_LIST, ABSTRACTS, k)\n",
    "#    mean = np.mean(make_scores(summaries, \"our_sum\", \"ref_sum\", cosine_sim, EMBEDDING))\n",
    "#    if mean > max_means:\n",
    "#        max_means = mean\n",
    "#        right_value = k\n",
    "#print(right_value)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Other known summary generation systems to compare ours to\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-04-15T08:51:28.032793Z",
     "start_time": "2020-04-15T08:51:28.018373Z"
    }
   },
   "source": [
    "We will use the [gensim summarization module](https://radimrehurek.com/gensim/summarization/summariser.html) which implements the TextRank method (graph based method) to generate extractive summaries."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We will also use [bert extractive summarizer](https://pypi.org/project/bert-extractive-summarizer/) which implements a centroïd based extractive summarozation system -> impossible to use because of a cuda error."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "`sudo python3 -m spacy download en_core_web_sm` needs to be done before using spacy (using gensim and bert)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Comparing summarizing techniques\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Computing summaries, scores and execution times"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-09-30T07:24:30.397108Z",
     "start_time": "2020-09-30T07:24:30.395121Z"
    },
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "RATIO = 0.05"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-09-30T07:24:50.718725Z",
     "start_time": "2020-09-30T07:24:30.398806Z"
    }
   },
   "outputs": [],
   "source": [
    "import gensim.summarization.summarizer as gen_sum\n",
    "\n",
    "mean_computation_time_gensim = 0\n",
    "TEXTRANK_TIMES = list()\n",
    "TEXTRANK_SUMMARIES = list()\n",
    "for (i, document) in enumerate(DOC_LIST):\n",
    "    #num_char = len(GISMO_SUMMARIES[i])\n",
    "    start_time = time.clock()\n",
    "    try:\n",
    "        TEXTRANK_SUMMARIES.append(gen_sum.summarize(document[\"content\"], ratio = RATIO)\\\n",
    "                                        .replace(\"\\n\", \" \").replace(\"\\r\",\" \"))#[:num_char])\n",
    "    except:\n",
    "        TEXTRANK_SUMMARIES.append(\"\")\n",
    "    TEXTRANK_TIMES.append(time.clock() - start_time)\n",
    "    mean_computation_time_gensim += time.clock() - start_time\n",
    "mean_computation_time_gensim /= len(TEXTRANK_TIMES)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-09-30T07:28:43.516293Z",
     "start_time": "2020-09-30T07:24:56.847092Z"
    },
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "finding best documents :  2.00000000916134e-06\n",
      "Splitting best docs in sentences :  0.016528000000008092\n",
      "creating idf sentences_gismo :  0.013237000000003718\n",
      "ranking sentences :  1.082104000000001\n",
      "Filtering and Gloutton :  0.005567999999996687\n",
      "coreference resolution and deleting adverbs :  2.568291000000002\n",
      "finding best documents :  9.999999974752427e-07\n",
      "Splitting best docs in sentences :  0.007176000000001181\n",
      "creating idf sentences_gismo :  0.005969999999990705\n",
      "ranking sentences :  0.009597999999996887\n",
      "Filtering and Gloutton :  0.003115999999991459\n",
      "coreference resolution and deleting adverbs :  1.8556880000000007\n",
      "finding best documents :  9.999999974752427e-07\n",
      "Splitting best docs in sentences :  0.007789000000002488\n",
      "creating idf sentences_gismo :  0.006764000000003989\n",
      "ranking sentences :  0.010153999999999996\n",
      "Filtering and Gloutton :  0.0073930000000075324\n",
      "coreference resolution and deleting adverbs :  2.969423000000006\n",
      "finding best documents :  9.999999974752427e-07\n",
      "Splitting best docs in sentences :  0.006888000000003558\n",
      "creating idf sentences_gismo :  0.006416999999999007\n",
      "ranking sentences :  0.009759999999999991\n",
      "Filtering and Gloutton :  0.006320000000016535\n",
      "coreference resolution and deleting adverbs :  2.229555000000005\n",
      "finding best documents :  9.999999974752427e-07\n",
      "Splitting best docs in sentences :  0.007077999999978601\n",
      "creating idf sentences_gismo :  0.006855999999999085\n",
      "ranking sentences :  0.009855000000015934\n",
      "Filtering and Gloutton :  0.0063370000000020354\n",
      "coreference resolution and deleting adverbs :  2.6667010000000175\n",
      "finding best documents :  9.999999974752427e-07\n",
      "Splitting best docs in sentences :  0.006730000000004566\n",
      "creating idf sentences_gismo :  0.006129999999984648\n",
      "ranking sentences :  0.00969299999999862\n",
      "Filtering and Gloutton :  0.005456000000009453\n",
      "coreference resolution and deleting adverbs :  2.1246229999999855\n",
      "finding best documents :  9.999999974752427e-07\n",
      "Splitting best docs in sentences :  0.0030950000000018463\n",
      "creating idf sentences_gismo :  0.005000999999992928\n",
      "ranking sentences :  0.009367000000025882\n",
      "Filtering and Gloutton :  0.0029789999999820793\n",
      "coreference resolution and deleting adverbs :  1.2419639999999958\n",
      "finding best documents :  9.999999974752427e-07\n",
      "Splitting best docs in sentences :  0.007558999999986327\n",
      "creating idf sentences_gismo :  0.0068389999999851625\n",
      "ranking sentences :  0.009751000000022714\n",
      "Filtering and Gloutton :  0.007135999999974274\n",
      "coreference resolution and deleting adverbs :  3.1130540000000053\n",
      "finding best documents :  1.0000000258969521e-06\n",
      "Splitting best docs in sentences :  0.003198999999995067\n",
      "creating idf sentences_gismo :  0.0050459999999930005\n",
      "ranking sentences :  0.009309999999999263\n",
      "Filtering and Gloutton :  0.0020409999999912998\n",
      "coreference resolution and deleting adverbs :  0.8169080000000122\n",
      "finding best documents :  1.0000000258969521e-06\n",
      "Splitting best docs in sentences :  0.006412000000011631\n",
      "creating idf sentences_gismo :  0.006737000000015314\n",
      "ranking sentences :  0.00996200000000158\n",
      "Filtering and Gloutton :  0.006526000000008025\n",
      "coreference resolution and deleting adverbs :  2.832146999999992\n",
      "finding best documents :  9.999999974752427e-07\n",
      "Splitting best docs in sentences :  0.008455999999995356\n",
      "creating idf sentences_gismo :  0.007182000000000244\n",
      "ranking sentences :  0.010045999999988453\n",
      "Filtering and Gloutton :  0.007468000000017128\n",
      "coreference resolution and deleting adverbs :  2.747399999999999\n",
      "finding best documents :  9.999999974752427e-07\n",
      "Splitting best docs in sentences :  0.00371100000000979\n",
      "creating idf sentences_gismo :  0.005500000000012051\n",
      "ranking sentences :  0.009439999999983684\n",
      "Filtering and Gloutton :  0.003260000000011587\n",
      "coreference resolution and deleting adverbs :  1.2039989999999818\n",
      "finding best documents :  9.999999974752427e-07\n",
      "Splitting best docs in sentences :  0.004472000000021126\n",
      "creating idf sentences_gismo :  0.0055080000000202745\n",
      "ranking sentences :  0.009430999999977985\n",
      "Filtering and Gloutton :  0.0038080000000206837\n",
      "coreference resolution and deleting adverbs :  1.7936109999999985\n",
      "finding best documents :  9.999999974752427e-07\n",
      "Splitting best docs in sentences :  0.005843999999996186\n",
      "creating idf sentences_gismo :  0.0055680000000108976\n",
      "ranking sentences :  0.009629999999987149\n",
      "Filtering and Gloutton :  0.004672999999996819\n",
      "coreference resolution and deleting adverbs :  1.9704299999999932\n",
      "finding best documents :  1.0000000258969521e-06\n",
      "Splitting best docs in sentences :  0.004614000000003671\n",
      "creating idf sentences_gismo :  0.00547599999998738\n",
      "ranking sentences :  0.009577000000007274\n",
      "Filtering and Gloutton :  0.004465000000010377\n",
      "coreference resolution and deleting adverbs :  1.9351300000000151\n",
      "finding best documents :  9.999999974752427e-07\n",
      "Splitting best docs in sentences :  0.006236999999998716\n",
      "creating idf sentences_gismo :  0.005786000000000513\n",
      "ranking sentences :  0.009848000000005186\n",
      "Filtering and Gloutton :  0.004059999999981301\n",
      "coreference resolution and deleting adverbs :  0.8496900000000096\n",
      "finding best documents :  1.9999999949504854e-06\n",
      "Splitting best docs in sentences :  0.005182999999988169\n",
      "creating idf sentences_gismo :  0.005374999999986585\n",
      "ranking sentences :  0.009279000000020687\n",
      "Filtering and Gloutton :  0.0041139999999870724\n",
      "coreference resolution and deleting adverbs :  1.6693300000000022\n",
      "finding best documents :  9.999999974752427e-07\n",
      "Splitting best docs in sentences :  0.0029339999999820066\n",
      "creating idf sentences_gismo :  0.004736000000008289\n",
      "ranking sentences :  0.009312999999991689\n",
      "Filtering and Gloutton :  0.0025929999999902975\n",
      "coreference resolution and deleting adverbs :  1.322355000000016\n",
      "finding best documents :  9.999999974752427e-07\n",
      "Splitting best docs in sentences :  0.006888000000003558\n",
      "creating idf sentences_gismo :  0.00720900000001734\n",
      "ranking sentences :  0.009840999999994438\n",
      "Filtering and Gloutton :  0.007221999999984519\n",
      "coreference resolution and deleting adverbs :  2.509746999999976\n",
      "finding best documents :  9.999999974752427e-07\n",
      "Splitting best docs in sentences :  0.005702000000013641\n",
      "creating idf sentences_gismo :  0.005720999999994092\n",
      "ranking sentences :  0.00971700000002329\n",
      "Filtering and Gloutton :  0.004617999999993572\n",
      "coreference resolution and deleting adverbs :  1.9476250000000164\n",
      "finding best documents :  3.0000000208474376e-06\n",
      "Splitting best docs in sentences :  0.0031700000000114414\n",
      "creating idf sentences_gismo :  0.004511000000007925\n",
      "ranking sentences :  0.009487000000007129\n",
      "Filtering and Gloutton :  0.0034870000000069012\n",
      "coreference resolution and deleting adverbs :  1.157874000000021\n",
      "finding best documents :  9.999999974752427e-07\n",
      "Splitting best docs in sentences :  0.006001999999995178\n",
      "creating idf sentences_gismo :  0.006506999999999152\n",
      "ranking sentences :  0.009805999999997539\n",
      "Filtering and Gloutton :  0.005345000000005484\n",
      "coreference resolution and deleting adverbs :  3.2782920000000217\n",
      "finding best documents :  9.999999974752427e-07\n",
      "Splitting best docs in sentences :  0.004350000000016507\n",
      "creating idf sentences_gismo :  0.005684000000002243\n",
      "ranking sentences :  0.009473000000014054\n",
      "Filtering and Gloutton :  0.003666000000009717\n",
      "coreference resolution and deleting adverbs :  1.2966590000000053\n",
      "finding best documents :  9.999999974752427e-07\n",
      "Splitting best docs in sentences :  0.006544999999988477\n",
      "creating idf sentences_gismo :  0.006139999999987822\n",
      "ranking sentences :  0.009620000000012396\n",
      "Filtering and Gloutton :  0.006171999999992295\n",
      "coreference resolution and deleting adverbs :  2.6582190000000026\n",
      "finding best documents :  9.999999974752427e-07\n",
      "Splitting best docs in sentences :  0.005293000000023085\n",
      "creating idf sentences_gismo :  0.00572800000000484\n",
      "ranking sentences :  0.009508000000010952\n",
      "Filtering and Gloutton :  0.0037169999999946413\n",
      "coreference resolution and deleting adverbs :  1.3253840000000139\n",
      "finding best documents :  1.0000000258969521e-06\n",
      "Splitting best docs in sentences :  0.0037130000000047403\n",
      "creating idf sentences_gismo :  0.005122000000000071\n",
      "ranking sentences :  0.009438000000017155\n",
      "Filtering and Gloutton :  0.002976999999987129\n",
      "coreference resolution and deleting adverbs :  1.3518139999999903\n",
      "finding best documents :  1.0000000258969521e-06\n",
      "Splitting best docs in sentences :  0.014731000000011818\n",
      "creating idf sentences_gismo :  0.009092999999978701\n",
      "ranking sentences :  0.010803999999978942\n",
      "Filtering and Gloutton :  0.012333999999981415\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "coreference resolution and deleting adverbs :  5.011804000000012\n",
      "finding best documents :  1.0000000258969521e-06\n",
      "Splitting best docs in sentences :  0.0031210000000214677\n",
      "creating idf sentences_gismo :  0.004704000000003816\n",
      "ranking sentences :  0.009273000000007414\n",
      "Filtering and Gloutton :  0.002459000000015976\n",
      "coreference resolution and deleting adverbs :  0.9628219999999885\n",
      "finding best documents :  9.999999974752427e-07\n",
      "Splitting best docs in sentences :  0.006547000000011849\n",
      "creating idf sentences_gismo :  0.005593000000004622\n",
      "ranking sentences :  0.009491999999994505\n",
      "Filtering and Gloutton :  0.004386000000010881\n",
      "coreference resolution and deleting adverbs :  2.016680000000008\n",
      "finding best documents :  9.999999974752427e-07\n",
      "Splitting best docs in sentences :  0.0023339999999905103\n",
      "creating idf sentences_gismo :  0.004729999999995016\n",
      "ranking sentences :  0.009321999999997388\n",
      "Filtering and Gloutton :  0.0018369999999947595\n",
      "coreference resolution and deleting adverbs :  0.9648320000000012\n",
      "finding best documents :  9.999999974752427e-07\n",
      "Splitting best docs in sentences :  0.0027829999999937627\n",
      "creating idf sentences_gismo :  0.004837000000009084\n",
      "ranking sentences :  0.009312999999991689\n",
      "Filtering and Gloutton :  0.0018539999999802603\n",
      "coreference resolution and deleting adverbs :  0.9049199999999757\n",
      "finding best documents :  9.999999974752427e-07\n",
      "Splitting best docs in sentences :  0.011561000000000377\n",
      "creating idf sentences_gismo :  0.008307000000002063\n",
      "ranking sentences :  0.010501000000004979\n",
      "Filtering and Gloutton :  0.011077000000000226\n",
      "coreference resolution and deleting adverbs :  5.235160000000008\n",
      "finding best documents :  9.999999974752427e-07\n",
      "Splitting best docs in sentences :  0.0030290000000263717\n",
      "creating idf sentences_gismo :  0.0049960000000055516\n",
      "ranking sentences :  0.009436000000022204\n",
      "Filtering and Gloutton :  0.00249500000001035\n",
      "coreference resolution and deleting adverbs :  0.7885159999999871\n",
      "finding best documents :  9.999999974752427e-07\n",
      "Splitting best docs in sentences :  0.008372000000008484\n",
      "creating idf sentences_gismo :  0.006985999999983505\n",
      "ranking sentences :  0.00984500000001276\n",
      "Filtering and Gloutton :  0.007312999999982139\n",
      "coreference resolution and deleting adverbs :  1.9779359999999997\n",
      "finding best documents :  9.999999974752427e-07\n",
      "Splitting best docs in sentences :  0.0022490000000061627\n",
      "creating idf sentences_gismo :  0.004565000000013697\n",
      "ranking sentences :  0.009157999999985122\n",
      "Filtering and Gloutton :  0.0016960000000096898\n",
      "coreference resolution and deleting adverbs :  0.49522699999999986\n",
      "finding best documents :  9.999999974752427e-07\n",
      "Splitting best docs in sentences :  0.0030409999999960746\n",
      "creating idf sentences_gismo :  0.004573000000021921\n",
      "ranking sentences :  0.009230999999999767\n",
      "Filtering and Gloutton :  0.0022610000000042874\n",
      "coreference resolution and deleting adverbs :  0.9584010000000092\n",
      "finding best documents :  9.999999974752427e-07\n",
      "Splitting best docs in sentences :  0.0071159999999963475\n",
      "creating idf sentences_gismo :  0.0061440000000061445\n",
      "ranking sentences :  0.009582999999992126\n",
      "Filtering and Gloutton :  0.006022000000001526\n",
      "coreference resolution and deleting adverbs :  2.288562000000013\n",
      "finding best documents :  9.999999974752427e-07\n",
      "Splitting best docs in sentences :  0.004516000000023723\n",
      "creating idf sentences_gismo :  0.005655000000018617\n",
      "ranking sentences :  0.009361999999981663\n",
      "Filtering and Gloutton :  0.0038059999999973115\n",
      "coreference resolution and deleting adverbs :  1.64871100000002\n",
      "finding best documents :  1.9999999949504854e-06\n",
      "Splitting best docs in sentences :  0.0032379999999818665\n",
      "creating idf sentences_gismo :  0.0049820000000124764\n",
      "ranking sentences :  0.00926100000000929\n",
      "Filtering and Gloutton :  0.002835000000004584\n",
      "coreference resolution and deleting adverbs :  1.3835400000000107\n",
      "finding best documents :  9.999999974752427e-07\n",
      "Splitting best docs in sentences :  0.011668999999983498\n",
      "creating idf sentences_gismo :  0.008236999999979844\n",
      "ranking sentences :  0.010531000000014501\n",
      "Filtering and Gloutton :  0.009478999999998905\n",
      "coreference resolution and deleting adverbs :  4.060195999999991\n",
      "finding best documents :  9.999999974752427e-07\n",
      "Splitting best docs in sentences :  0.008654000000007045\n",
      "creating idf sentences_gismo :  0.007170000000002119\n",
      "ranking sentences :  0.009917000000001508\n",
      "Filtering and Gloutton :  0.007444000000020878\n",
      "coreference resolution and deleting adverbs :  3.3706280000000106\n",
      "finding best documents :  9.999999974752427e-07\n",
      "Splitting best docs in sentences :  0.004998000000000502\n",
      "creating idf sentences_gismo :  0.005924000000021579\n",
      "ranking sentences :  0.009491999999994505\n",
      "Filtering and Gloutton :  0.00402800000000525\n",
      "coreference resolution and deleting adverbs :  1.1446080000000052\n",
      "finding best documents :  9.999999974752427e-07\n",
      "Splitting best docs in sentences :  0.0018929999999954816\n",
      "creating idf sentences_gismo :  0.004108999999999696\n",
      "ranking sentences :  0.009067000000015923\n",
      "Filtering and Gloutton :  0.0013480000000072323\n",
      "coreference resolution and deleting adverbs :  0.4362769999999898\n",
      "finding best documents :  9.999999974752427e-07\n",
      "Splitting best docs in sentences :  0.004231000000004315\n",
      "creating idf sentences_gismo :  0.0053420000000130585\n",
      "ranking sentences :  0.009444000000002006\n",
      "Filtering and Gloutton :  0.003696999999988293\n",
      "coreference resolution and deleting adverbs :  1.319609999999983\n",
      "finding best documents :  9.999999974752427e-07\n",
      "Splitting best docs in sentences :  0.002303999999980988\n",
      "creating idf sentences_gismo :  0.0045769999999834\n",
      "ranking sentences :  0.00917799999999147\n",
      "Filtering and Gloutton :  0.001322999999985086\n",
      "coreference resolution and deleting adverbs :  0.22548900000001026\n",
      "finding best documents :  9.999999974752427e-07\n",
      "Splitting best docs in sentences :  0.0013000000000147338\n",
      "creating idf sentences_gismo :  0.00392800000000193\n",
      "ranking sentences :  0.008927999999997382\n",
      "Filtering and Gloutton :  0.0009969999999839274\n",
      "coreference resolution and deleting adverbs :  0.6289330000000177\n",
      "finding best documents :  9.999999974752427e-07\n",
      "Splitting best docs in sentences :  0.005597999999991998\n",
      "creating idf sentences_gismo :  0.005814000000015085\n",
      "ranking sentences :  0.009624000000002297\n",
      "Filtering and Gloutton :  0.004775999999992564\n",
      "coreference resolution and deleting adverbs :  2.5815559999999778\n",
      "finding best documents :  1.0000000258969521e-06\n",
      "Splitting best docs in sentences :  0.009417000000013331\n",
      "creating idf sentences_gismo :  0.0077339999999992415\n",
      "ranking sentences :  0.010367000000002236\n",
      "Filtering and Gloutton :  0.008775000000014188\n",
      "coreference resolution and deleting adverbs :  5.1188040000000115\n",
      "finding best documents :  9.999999974752427e-07\n",
      "Splitting best docs in sentences :  0.0044549999999787815\n",
      "creating idf sentences_gismo :  0.005888999999996258\n",
      "ranking sentences :  0.009651000000019394\n",
      "Filtering and Gloutton :  0.00385399999998981\n",
      "coreference resolution and deleting adverbs :  1.750066000000004\n",
      "finding best documents :  9.999999974752427e-07\n",
      "Splitting best docs in sentences :  0.006469000000009828\n",
      "creating idf sentences_gismo :  0.006524999999982128\n",
      "ranking sentences :  0.00983400000001211\n",
      "Filtering and Gloutton :  0.005654999999990196\n",
      "coreference resolution and deleting adverbs :  1.858665000000002\n",
      "finding best documents :  9.999999974752427e-07\n",
      "Splitting best docs in sentences :  0.00646399999999403\n",
      "creating idf sentences_gismo :  0.005660000000005994\n",
      "ranking sentences :  0.009477000000003954\n",
      "Filtering and Gloutton :  0.004765000000020336\n",
      "coreference resolution and deleting adverbs :  2.347276999999991\n",
      "finding best documents :  1.9999999949504854e-06\n",
      "Splitting best docs in sentences :  0.005846000000019558\n",
      "creating idf sentences_gismo :  0.005407999999988533\n",
      "ranking sentences :  0.009534999999999627\n",
      "Filtering and Gloutton :  0.004261000000013837\n",
      "coreference resolution and deleting adverbs :  1.7936940000000163\n",
      "finding best documents :  9.999999974752427e-07\n",
      "Splitting best docs in sentences :  0.010932999999994308\n",
      "creating idf sentences_gismo :  0.008852999999987787\n",
      "ranking sentences :  0.010890000000017608\n",
      "Filtering and Gloutton :  0.010788999999988391\n",
      "coreference resolution and deleting adverbs :  5.022475000000014\n",
      "finding best documents :  9.999999974752427e-07\n",
      "Splitting best docs in sentences :  0.004815000000007785\n",
      "creating idf sentences_gismo :  0.005675999999994019\n",
      "ranking sentences :  0.00955200000001355\n",
      "Filtering and Gloutton :  0.004735999999979867\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "coreference resolution and deleting adverbs :  2.842897999999991\n",
      "finding best documents :  9.999999974752427e-07\n",
      "Splitting best docs in sentences :  0.0023349999999879856\n",
      "creating idf sentences_gismo :  0.004615000000001146\n",
      "ranking sentences :  0.009271000000012464\n",
      "Filtering and Gloutton :  0.0013810000000091804\n",
      "coreference resolution and deleting adverbs :  0.2491730000000132\n",
      "finding best documents :  1.9999999949504854e-06\n",
      "Splitting best docs in sentences :  0.0024959999999794036\n",
      "creating idf sentences_gismo :  0.005134999999995671\n",
      "ranking sentences :  0.009381999999988011\n",
      "Filtering and Gloutton :  0.0022189999999966403\n",
      "coreference resolution and deleting adverbs :  0.6677899999999966\n",
      "finding best documents :  9.999999974752427e-07\n",
      "Splitting best docs in sentences :  0.007161000000024842\n",
      "creating idf sentences_gismo :  0.007052999999984877\n",
      "ranking sentences :  0.010376999999976988\n",
      "Filtering and Gloutton :  0.006369000000006508\n",
      "coreference resolution and deleting adverbs :  2.7724599999999953\n",
      "finding best documents :  9.999999974752427e-07\n",
      "Splitting best docs in sentences :  0.006615000000010696\n",
      "creating idf sentences_gismo :  0.006280000000003838\n",
      "ranking sentences :  0.009677999999979647\n",
      "Filtering and Gloutton :  0.006521999999989703\n",
      "coreference resolution and deleting adverbs :  2.7827350000000024\n",
      "finding best documents :  9.999999974752427e-07\n",
      "Splitting best docs in sentences :  0.004935999999986507\n",
      "creating idf sentences_gismo :  0.0051149999999893225\n",
      "ranking sentences :  0.010072000000008074\n",
      "Filtering and Gloutton :  0.0038800000000094315\n",
      "coreference resolution and deleting adverbs :  2.0202060000000017\n",
      "finding best documents :  9.999999974752427e-07\n",
      "Splitting best docs in sentences :  0.01079599999999914\n",
      "creating idf sentences_gismo :  0.008005999999994629\n",
      "ranking sentences :  0.01049399999999423\n",
      "Filtering and Gloutton :  0.010238999999984344\n",
      "coreference resolution and deleting adverbs :  5.198892999999998\n",
      "finding best documents :  1.0000000258969521e-06\n",
      "Splitting best docs in sentences :  0.006664000000000669\n",
      "creating idf sentences_gismo :  0.0067659999999989395\n",
      "ranking sentences :  0.009926000000007207\n",
      "Filtering and Gloutton :  0.005445000000008804\n",
      "coreference resolution and deleting adverbs :  1.781517000000008\n",
      "finding best documents :  9.999999974752427e-07\n",
      "Splitting best docs in sentences :  0.0038930000000050313\n",
      "creating idf sentences_gismo :  0.0061300000000130694\n",
      "ranking sentences :  0.011782999999979893\n",
      "Filtering and Gloutton :  0.002681999999992968\n",
      "coreference resolution and deleting adverbs :  1.036687999999998\n",
      "finding best documents :  9.999999974752427e-07\n",
      "Splitting best docs in sentences :  0.0030399999999985994\n",
      "creating idf sentences_gismo :  0.0050740000000075725\n",
      "ranking sentences :  0.00963000000001557\n",
      "Filtering and Gloutton :  0.00265099999998597\n",
      "coreference resolution and deleting adverbs :  0.9548559999999782\n",
      "finding best documents :  9.999999974752427e-07\n",
      "Splitting best docs in sentences :  0.0031779999999912434\n",
      "creating idf sentences_gismo :  0.005234000000001515\n",
      "ranking sentences :  0.010369999999994661\n",
      "Filtering and Gloutton :  0.003391999999990958\n",
      "coreference resolution and deleting adverbs :  1.0897560000000226\n",
      "finding best documents :  9.999999974752427e-07\n",
      "Splitting best docs in sentences :  0.006378999999981261\n",
      "creating idf sentences_gismo :  0.006200000000006867\n",
      "ranking sentences :  0.009910999999988235\n",
      "Filtering and Gloutton :  0.00496999999998593\n",
      "coreference resolution and deleting adverbs :  1.8972059999999829\n",
      "finding best documents :  9.999999974752427e-07\n",
      "Splitting best docs in sentences :  0.002441000000033\n",
      "creating idf sentences_gismo :  0.0045630000000187465\n",
      "ranking sentences :  0.00968000000000302\n",
      "Filtering and Gloutton :  0.0019169999999917309\n",
      "coreference resolution and deleting adverbs :  1.010719999999992\n",
      "finding best documents :  9.999999974752427e-07\n",
      "Splitting best docs in sentences :  0.008880999999973938\n",
      "creating idf sentences_gismo :  0.006983999999988555\n",
      "ranking sentences :  0.009788000000014563\n",
      "Filtering and Gloutton :  0.0073499999999739885\n",
      "coreference resolution and deleting adverbs :  4.511089999999967\n",
      "finding best documents :  9.999999974752427e-07\n",
      "Splitting best docs in sentences :  0.0035110000000031505\n",
      "creating idf sentences_gismo :  0.005469000000005053\n",
      "ranking sentences :  0.009617999999989024\n",
      "Filtering and Gloutton :  0.0033889999999701104\n",
      "coreference resolution and deleting adverbs :  2.1856709999999566\n",
      "finding best documents :  1.9999999949504854e-06\n",
      "Splitting best docs in sentences :  0.0025519999999801257\n",
      "creating idf sentences_gismo :  0.004714999999976044\n",
      "ranking sentences :  0.009134999999957927\n",
      "Filtering and Gloutton :  0.0018509999999878346\n",
      "coreference resolution and deleting adverbs :  0.6111960000000067\n",
      "finding best documents :  9.999999974752427e-07\n",
      "Splitting best docs in sentences :  0.0015890000000240434\n",
      "creating idf sentences_gismo :  0.0044480000000248765\n",
      "ranking sentences :  0.009355000000027758\n",
      "Filtering and Gloutton :  0.00101399999999785\n",
      "coreference resolution and deleting adverbs :  0.3427469999999744\n",
      "finding best documents :  9.999999974752427e-07\n",
      "Splitting best docs in sentences :  0.006854000000032556\n",
      "creating idf sentences_gismo :  0.006460000000004129\n",
      "ranking sentences :  0.00990999999999076\n",
      "Filtering and Gloutton :  0.00576699999999164\n",
      "coreference resolution and deleting adverbs :  2.5851839999999697\n",
      "finding best documents :  1.9999999949504854e-06\n",
      "Splitting best docs in sentences :  0.006097000000011121\n",
      "creating idf sentences_gismo :  0.006819000000007236\n",
      "ranking sentences :  0.012163000000043667\n",
      "Filtering and Gloutton :  0.004820999999992637\n",
      "coreference resolution and deleting adverbs :  1.862324000000001\n",
      "finding best documents :  9.999999974752427e-07\n",
      "Splitting best docs in sentences :  0.0032260000000405853\n",
      "creating idf sentences_gismo :  0.004919000000029428\n",
      "ranking sentences :  0.009346999999991112\n",
      "Filtering and Gloutton :  0.003072999999972126\n",
      "coreference resolution and deleting adverbs :  2.099115999999981\n",
      "finding best documents :  9.999999974752427e-07\n",
      "Splitting best docs in sentences :  0.006539999999972679\n",
      "creating idf sentences_gismo :  0.006164000000012493\n",
      "ranking sentences :  0.009703000000001794\n",
      "Filtering and Gloutton :  0.004458999999997104\n",
      "coreference resolution and deleting adverbs :  1.3190159999999764\n",
      "finding best documents :  9.999999974752427e-07\n",
      "Splitting best docs in sentences :  0.0057530000000269865\n",
      "creating idf sentences_gismo :  0.005606999999997697\n",
      "ranking sentences :  0.00939099999999371\n",
      "Filtering and Gloutton :  0.004336000000023432\n",
      "coreference resolution and deleting adverbs :  1.0320370000000025\n",
      "finding best documents :  9.999999974752427e-07\n",
      "Splitting best docs in sentences :  0.004065999999966152\n",
      "creating idf sentences_gismo :  0.004874000000029355\n",
      "ranking sentences :  0.009298999999998614\n",
      "Filtering and Gloutton :  0.003520999999977903\n",
      "coreference resolution and deleting adverbs :  1.4362160000000017\n",
      "finding best documents :  9.999999974752427e-07\n",
      "Splitting best docs in sentences :  0.002238000000033935\n",
      "creating idf sentences_gismo :  0.004568000000006123\n",
      "ranking sentences :  0.009102000000041244\n",
      "Filtering and Gloutton :  0.0018010000000003856\n",
      "coreference resolution and deleting adverbs :  0.7905039999999985\n",
      "finding best documents :  9.999999974752427e-07\n",
      "Splitting best docs in sentences :  0.004001000000016575\n",
      "creating idf sentences_gismo :  0.005293999999992138\n",
      "ranking sentences :  0.009447000000022854\n",
      "Filtering and Gloutton :  0.0036249999999995453\n",
      "coreference resolution and deleting adverbs :  1.3368750000000205\n",
      "finding best documents :  9.999999974752427e-07\n",
      "Splitting best docs in sentences :  0.003215000000011514\n",
      "creating idf sentences_gismo :  0.00568500000002814\n",
      "ranking sentences :  0.009944000000018605\n",
      "Filtering and Gloutton :  0.003471999999987929\n",
      "coreference resolution and deleting adverbs :  1.408625000000029\n",
      "finding best documents :  2.999999992425728e-06\n",
      "Splitting best docs in sentences :  0.00411700000000792\n",
      "creating idf sentences_gismo :  0.005523999999979878\n",
      "ranking sentences :  0.011293000000023312\n",
      "Filtering and Gloutton :  0.003026000000033946\n",
      "coreference resolution and deleting adverbs :  1.0748399999999947\n",
      "finding best documents :  9.999999974752427e-07\n",
      "Splitting best docs in sentences :  0.00947600000000648\n",
      "creating idf sentences_gismo :  0.007866000000035456\n",
      "ranking sentences :  0.012173000000018419\n",
      "Filtering and Gloutton :  0.007695999999953074\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "coreference resolution and deleting adverbs :  2.6521880000000237\n",
      "finding best documents :  9.999999974752427e-07\n",
      "Splitting best docs in sentences :  0.0019920000000297478\n",
      "creating idf sentences_gismo :  0.005512000000010175\n",
      "ranking sentences :  0.012477999999987333\n",
      "Filtering and Gloutton :  0.002308999999968364\n",
      "coreference resolution and deleting adverbs :  1.087554999999952\n",
      "finding best documents :  9.999999974752427e-07\n",
      "Splitting best docs in sentences :  0.014048999999999978\n",
      "creating idf sentences_gismo :  0.009330999999974665\n",
      "ranking sentences :  0.010441000000014355\n",
      "Filtering and Gloutton :  0.01334100000002536\n",
      "coreference resolution and deleting adverbs :  7.800874000000022\n",
      "finding best documents :  1.0000000543186616e-06\n",
      "Splitting best docs in sentences :  0.00628799999998364\n",
      "creating idf sentences_gismo :  0.006996999999955733\n",
      "ranking sentences :  0.009688000000039665\n",
      "Filtering and Gloutton :  0.005900999999994383\n",
      "coreference resolution and deleting adverbs :  2.5874640000000113\n",
      "finding best documents :  9.999999974752427e-07\n",
      "Splitting best docs in sentences :  0.004280999999991764\n",
      "creating idf sentences_gismo :  0.005463000000020202\n",
      "ranking sentences :  0.01185099999997874\n",
      "Filtering and Gloutton :  0.00400200000001405\n",
      "coreference resolution and deleting adverbs :  1.8492560000000253\n",
      "finding best documents :  9.999999974752427e-07\n",
      "Splitting best docs in sentences :  0.006852999999978238\n",
      "creating idf sentences_gismo :  0.006618000000003121\n",
      "ranking sentences :  0.009790000000009513\n",
      "Filtering and Gloutton :  0.006602999999984149\n",
      "coreference resolution and deleting adverbs :  3.5831470000000536\n",
      "finding best documents :  9.999999974752427e-07\n",
      "Splitting best docs in sentences :  0.0020560000000386935\n",
      "creating idf sentences_gismo :  0.004771000000005188\n",
      "ranking sentences :  0.011493999999970583\n",
      "Filtering and Gloutton :  0.002040999999962878\n",
      "coreference resolution and deleting adverbs :  0.6135610000000042\n",
      "finding best documents :  9.999999974752427e-07\n",
      "Splitting best docs in sentences :  0.01361999999994623\n",
      "creating idf sentences_gismo :  0.010140000000035343\n",
      "ranking sentences :  0.012464999999963311\n",
      "Filtering and Gloutton :  0.0130500000000211\n",
      "coreference resolution and deleting adverbs :  5.94770699999998\n",
      "finding best documents :  9.999999974752427e-07\n",
      "Splitting best docs in sentences :  0.007302999999978965\n",
      "creating idf sentences_gismo :  0.0064950000000294494\n",
      "ranking sentences :  0.009779000000037286\n",
      "Filtering and Gloutton :  0.006415000000004056\n",
      "coreference resolution and deleting adverbs :  3.3208589999999845\n",
      "finding best documents :  9.999999974752427e-07\n",
      "Splitting best docs in sentences :  0.0016929999999888423\n",
      "creating idf sentences_gismo :  0.005673999999999069\n",
      "ranking sentences :  0.012176000000010845\n",
      "Filtering and Gloutton :  0.0019369999999980791\n",
      "coreference resolution and deleting adverbs :  0.604692\n",
      "finding best documents :  9.999999974752427e-07\n",
      "Splitting best docs in sentences :  0.007339000000001761\n",
      "creating idf sentences_gismo :  0.006307999999989988\n",
      "ranking sentences :  0.009892999999976837\n",
      "Filtering and Gloutton :  0.0060330000000021755\n",
      "coreference resolution and deleting adverbs :  2.3954990000000294\n",
      "finding best documents :  9.999999974752427e-07\n",
      "Splitting best docs in sentences :  0.01008600000000115\n",
      "creating idf sentences_gismo :  0.007813999999996213\n",
      "ranking sentences :  0.010009000000025026\n",
      "Filtering and Gloutton :  0.00977299999999559\n",
      "coreference resolution and deleting adverbs :  3.7687030000000163\n",
      "finding best documents :  9.999999974752427e-07\n",
      "Splitting best docs in sentences :  0.022708999999963453\n",
      "creating idf sentences_gismo :  0.013168000000007396\n",
      "ranking sentences :  0.01214399999997795\n",
      "Filtering and Gloutton :  0.01822900000001937\n",
      "coreference resolution and deleting adverbs :  4.7893190000000345\n",
      "finding best documents :  9.999999974752427e-07\n",
      "Splitting best docs in sentences :  0.005091000000049917\n",
      "creating idf sentences_gismo :  0.005499999999983629\n",
      "ranking sentences :  0.00944699999996601\n",
      "Filtering and Gloutton :  0.004266000000029635\n",
      "coreference resolution and deleting adverbs :  1.4587950000000092\n",
      "finding best documents :  9.999999974752427e-07\n",
      "Splitting best docs in sentences :  0.003527000000019598\n",
      "creating idf sentences_gismo :  0.005162999999981821\n",
      "ranking sentences :  0.009422999999969761\n",
      "Filtering and Gloutton :  0.0033389999999826614\n",
      "coreference resolution and deleting adverbs :  1.305422999999962\n",
      "finding best documents :  9.999999974752427e-07\n",
      "Splitting best docs in sentences :  0.004815000000007785\n",
      "creating idf sentences_gismo :  0.00550900000001775\n",
      "ranking sentences :  0.009398999999973512\n",
      "Filtering and Gloutton :  0.004033999999990101\n",
      "coreference resolution and deleting adverbs :  1.7352980000000002\n",
      "finding best documents :  9.999999974752427e-07\n",
      "Splitting best docs in sentences :  0.00634900000000016\n",
      "creating idf sentences_gismo :  0.0059180000000083055\n",
      "ranking sentences :  0.009805000000028485\n",
      "Filtering and Gloutton :  0.004365000000007058\n",
      "coreference resolution and deleting adverbs :  1.7740459999999985\n",
      "finding best documents :  9.999999974752427e-07\n",
      "Splitting best docs in sentences :  0.015548000000023876\n",
      "creating idf sentences_gismo :  0.008941999999990458\n",
      "ranking sentences :  0.010332000000005337\n",
      "Filtering and Gloutton :  0.012507000000027801\n",
      "coreference resolution and deleting adverbs :  6.2547779999999875\n",
      "finding best documents :  9.999999974752427e-07\n",
      "Splitting best docs in sentences :  0.0075949999999807005\n",
      "creating idf sentences_gismo :  0.006710999999995693\n",
      "ranking sentences :  0.00986500000004753\n",
      "Filtering and Gloutton :  0.007321999999987838\n",
      "coreference resolution and deleting adverbs :  2.8075269999999932\n",
      "finding best documents :  9.999999974752427e-07\n",
      "Splitting best docs in sentences :  0.031894000000022515\n",
      "creating idf sentences_gismo :  0.01678900000001704\n",
      "ranking sentences :  0.012301999999976942\n",
      "Filtering and Gloutton :  0.032779000000005\n",
      "coreference resolution and deleting adverbs :  11.83548300000001\n"
     ]
    }
   ],
   "source": [
    "from gismo.common import auto_k\n",
    "\n",
    "mean_computation_time_gismo = 0\n",
    "GISMO_TIMES = list()\n",
    "GISMO_SUMMARIES = list()\n",
    "for (i, document) in enumerate(DOC_LIST):\n",
    "    num_sentences = 2 * len(make_sentences(TEXTRANK_SUMMARIES[i]))\n",
    "    real_start_time = time.clock()\n",
    "    GISMO_SUMMARIES.append(\" \".join(\n",
    "        summarize(\n",
    "            documents = [document],\n",
    "            query = \"\",\n",
    "            num_sentences = num_sentences,\n",
    "            embedding = EMBEDDING,\n",
    "            weight_s = 1,# Vaut 1 si pas MMR\n",
    "            covering = False, # ni MMR ni covering , on fait du glouton\n",
    "            sim_to_query = False,\n",
    "            itf = False,\n",
    "            #query_distortion = False,\n",
    "            length_textrank = len(TEXTRANK_SUMMARIES[i]),\n",
    "            post = True,\n",
    "            size_generic_query = 5,\n",
    "            #size_generic_query = None,\n",
    "            #target_auto_k = 3\n",
    "        ))#[:len(TEXTRANK_SUMMARIES[i])]\n",
    "        \n",
    "    )\n",
    "    GISMO_TIMES.append(time.clock() - real_start_time)\n",
    "    mean_computation_time_gismo += time.clock() - real_start_time\n",
    "mean_computation_time_gismo /= len(GISMO_TIMES)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-09-30T07:28:43.870975Z",
     "start_time": "2020-09-30T07:28:43.518482Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "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sSiJ4xhjDN3d3XR3d7e6OTVRC52iKIqyU7zlLW/B931uvfVWTj/9dJ70pCexzz77cNRRR/HVr36VL37xi5VlJ7tc77jjDk444QT6+/vp6upi7dq1fOc736nMFxEuvPBCXvnKV9LV1cXee+/Nj3/8Y4aGhnjNa15DT08P++23Hz/5yU8mtOnuu+/mRS96UeXBe9JJJ3HffffN+Dv+8Ic/8MxnPpOenh56eno45JBD+NWvflWZv3nzZs444wyWLVtGT08Pz3zmM/nd7343YRtXX301T3rSk8jn8zzpSU/i6quvRkT47ne/C8CDDz6IiPCHP/xhwnpr1qzh3HPPrXwfHR3l7LPPrtQmPOyww/jpT39amZ9u54c//CEnnnginZ2d7LfffhOscatXryaKIs4880xEpJI5OdnlaozhTW96E4973OPo6Ohgv/3245xzzqFcLs94vOZy/Or93TtzvtNtf//73+eEE06gs7OTxz/+8Vx77bVs2LCBF77whXR1dXHQQQfx+9//vrJePb87da1edtllPP7xjyebzXLPPfdMcbmmx3fy34MPPljX+WwkaqFTFEVpM877nzu485HhBd3nQXv28tGTDq57+e3bt/PLX/6Sj33sY9NWtZ+pBMOrXvUqnvCEJ/CnP/2JfD7P3XffTRRFE5b5xCc+wWc+8xk+8YlP8PnPf57TTz+do446ile+8pWcd955XHDBBbzuda/jqKOOYrfddqNYLHL88cezZs0arr32WiBxkT3/+c/nzjvvJJvNTmlHGIa8+MUv5owzzqiIor/97W90dnYCUCwWed7znsfatWu5/PLL6e/v57LLLuO4447jL3/5C2vXruWRRx7hxBNP5BWveAWXXnopGzZs4Oyzz677WKYYYzjppJMwxnDZZZex55578pvf/IbTTjuNyy+/nGOOOaay7Pvf/34+/elP88UvfpFvfvObvPGNb+QZz3gGBxxwADfeeCMrVqzgc5/7HK985Stn3N/uu+/O97//fZYvX87tt9/Om9/8ZjKZDOedd15dbZ7t+M2FuZ7vlA9/+MN87nOf48ILL+R973sfp512GgcffDBvfetb+eIXv8g555zDq1/9atatW0cmk6n7dz/yyCNcdNFFfOtb32JgYIAVK1ZMafPGjRsBiGNDbGLOPOMMNmzYwPLly+d0PhuBCjpFURRlztx3333EcczatWsnTH/GM57B7bffDsA+++zDHXfcUXP9hx56iHe9610cdNBBAOy3335TljnttNN4/etfD8B5553HV77yFdasWcMZZ5wBwPnnn89//Md/cN1113HiiSfy/e9/n61bt3LzzTezdOlSAC699FJWr17NpZdeyute97op+xgZGWHHjh28+MUvZv/99weo/Ae47LLLGB4e5rLLLqskB3zwgx/kqquu4j//8z/54he/yEUXXcTSpUu5+OKL8TyPgw46iE9+8pOcdNJJdR9PgGuvvZbrrruOzZs3V1zUZ511Ftdffz0XXnjhBAHwtre9jVe84hUAfOxjH+PCCy/k6quv5oADDmDZsmVA4uaeycXqOA6f+MQnKt9Xr17N/fffz0UXXVS3oJvt+M2FuZ7vlLe//e285CUvAeCcc87hyCOP5D3veQ+nnHIKkJyvww8/nLvvvpsnPOEJdf/uUqnEd77zHfbee+9p25we341DRc7/8Ie5/fbbuf766+no6OCaa66p+3w2AhV0iqIobcZcLGWtxhgz4ftll11GuVzmoosumtG19J73vIc3vvGNXHLJJRx11FG8+MUv5vDDD5+wzCGHHFL5vGzZMlzX5UlPelJl2sDAANlstjJU0h133MFBBx1UEXMAy5cv58ADD5xWWA4MDPDGN76RE044gaOPPprnPve5nHLKKRx44IEA3HjjjWzatIn+/v4J65XL5coIH3feeSdHHnnkhGzQZz3rWdP+9um48cYb8X2flStXTpju+/4UkXTooYdWPruuy+67787mzZvnvM+LL76Yr3/96zz44IOMjY0RhiFxHNe9/mzHby7M9XzXWi8VWNXrpdOq16vndy9fvnxGMVfNj37wfb79tS9zzTVXs++++wJzO5+NQGPoFEVRlDmzZs0aHMfhrrvumjB91apVrFmzhiVLlsy4/oc//GHuueceXvGKV/C3v/2Npz3taXzoQx+asEwmk5my3uRpIjInAVKLiy++mJtvvpnjjjuOa6+9lic84Qn853/+J0DFCvmXv/xlwt9dd93FxRdfXPc+HCd53E4WwNXDPMVxTF9f35R93XnnnVx++eUT1pvsPt6Z4/CjH/2It771rbzyla/kl7/8Jbfeeisf+chH5jz01EzHr57fnbKz57t6mdTNX2taul69v7urq2uGXz3OH/7wB977zrfxiS9+hac97WmV6XM5n41ABZ2iKIoyZ5YsWcILXvACLrzwQoaGhnZqG/vttx9vectb+PGPf8z555/PV77ylXm16eCDD+bOO+/k0UcfrUzbvHlzxdU2E094whN417vexeWXX84b3vAGvva1rwFwxBFHsG7dOnp7e1mzZs2Ev7T8x0EHHcQNN9wwIQbwj3/844Ttp27QRx55pDJty5YtbNiwofL9iCOOYHBwkFKpNGVf9VqKUrLZ7JSYxMn87ne/47DDDuNd73oXT37yk9l///0rwfxzZbrjV8/vXmga+bvXrVvHKaecwjve/T5e8OJTJ8xr5PmsBxV0iqIoyk5x0UUXkclkOOyww/j2t7/N7bffzrp167j88sv53//9X1zXrbne6Ogob33rW/ntb3/LAw88wK233soVV1xRiafbWV796lezbNkyXvnKV3LLLbdw8803c9ppp7Fy5cppkwPuu+8+3ve+9/GHP/yBhx56iOuuu47f//73lba85jWvYd999+VFL3oRv/71r3nwwQf585//zKc+9Sl+9rOfAfDP//zPbN26lbPOOou77rqLq666ig9+8IMT9tPR0cEzn/lM/u3f/o3bbruNm2++mde97nXkcrnKMkcffTTHHnssp556Kj/72c9Yt24dN998MxdeeOGcrIEA++67L1dffTWPPPLIBIFbzYEHHshf//pXfv7zn3P//fdzwQUXzDkDc7bjV8/vXmga8bshSZg58cQTefrTn85pr3kdj27dzKZNm9i0aRNRFDX0fNaDCjpFURRlp9h777259dZbefnLX86nPvUpnvrUp3LwwQfz7ne/m6c//elcddVVNdfzPI8dO3bwhje8gbVr13LCCSewfPlyvv/978+rPR0dHfz6178ml8vxnOc8h+c+97l0dXVxxRVX1MxwhcStdu+993LaaadxwAEH8NKXvpRnPOMZ/Md//AcA+Xyea6+9liOOOIIzzzyTAw44gFNPPZUbbriBffbZB4CVK1fyP//zP9xwww0ceuihnH322Xz+85+fsq9vfvObdHd384xnPIPTTjuNs846a0LmpIjwi1/8glNPPZV3vvOdPP7xj+dFL3oR//d//8fjHve4OR2Lz33uc9x8882sXr26YiWbzJvf/GZOP/10zjzzTA477DD+/Oc/TyglUg+zHb96fvdC04jfDYn196677uJ//ud/ePJBj+O5hx7AihUrWLFi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tOokkgceeICPfOQjXHfddWzZsoU4jikUChUXecqRRx5ZV9tHR0c56aSTePrTnz7BenjjjTdy/fXX8x//8R9T1rn33nsXtaAToy5XRVEUZRcjjmNOP/103v/+90+ZV+3C27hxI/fccw+u63LPPffUvf1MJsOaNWuARMBs2rSJV73qVVx55ZUA/PnPf+blL385H/jAB/jsZz/LwMAA119/Pa9//esnxI45joPrupXvqctvsjvxpJNO4pJLLuG6667j6KOPnrFthx56KA888ABXXnklV199NWeffTYf/vCHuf766+nt7cVxHIwxE9YJgqDmb6xGRGpOm9zWnVnvxBNPZOnSpXz5y1+uuLef9axnTUky6erqmvG3Q3LsXvWqV5HJZKbEBsZxzPve975K/F01k62wiw3BYNRCpyiKouxKHHHEEdx+++087nGPmzYuKo5jXvOa13DIIYfwlre8hdNOO41jjjmGZzzjGcB4PFwURbPu71//9V9ZtWoVP/3pTzn11FP5wx/+wNKlS/n4xz9eWebHP/7xTv+eD3zgA+y7776ceOKJ/OxnP+P444+fcfnu7m5OOeUUTjnlFM455xxWrFjBtddey0knncTuu+/OddddN2H5W265ZafbNl+2bdvGnXfeyS9/+UtOOOEEAB5++OEplr96ec973sNtt93GDTfcQGdn54R5RxxxBHfccUdFjO9KJFmurUWzXBVFUZSGcs4553DXXXfx2te+lhtuuIEHHnigYq1at24dAJ/4xCe44447+M53vsNLX/pSzjrrLF796lczODgIwD777IPjOPzyl79ky5YtE7I5J9Pf388b3/hGPvShDxFFEQceeCBbt27lG9/4BuvWrePb3/42F1100bx+03ve8x4+9alPcfLJJ/PLX/5y2uU++9nP8r3vfY877riDBx54gG9+85u4rssBBxwAwLHHHsvf//53vvzlL3P//fdz8cUX88Mf/nBebZsPAwMDLFu2jIsvvph77rmH6667jle96lWzupZrcckll3DRRRfx9a9/HYBNmzaxadOmyrk7//zz+fnPf8673vUu/vKXv3D//fdzxRVX8IY3vIFisdjQ37WQjFtctWyJoiiKsguxdu1a/vSnPzE6OsoJJ5zAQQcdxJve9CaKxSL9/f386U9/4vzzz+eb3/xmJW7tc5/7HH19fZx11lkALF++nE99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\n",
      "text/plain": [
       "<Figure size 720x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "x_axes = [i for i in range(0, len(TEXTRANK_SUMMARIES))]\n",
    "\n",
    "y_axes_1 = [len(summary) for summary in GISMO_SUMMARIES]\n",
    "y_axes_2 = [len(summary) for summary in TEXTRANK_SUMMARIES]\n",
    "\n",
    "fig = plt.figure(figsize=(10, 8))\n",
    "ax = fig.add_subplot(1, 1, 1)\n",
    "plt.xlabel(\"indice résumé\", fontsize = \"x-large\")\n",
    "plt.ylabel(\"nombre de caractères\", fontsize = \"x-large\")\n",
    "plt.title(\"comparaison de la taille des résumés produits en nombre de caractères\", fontsize = \"x-large\") \n",
    "\n",
    "ax.plot(x_axes, y_axes_1, label=\"Gismo sequential summarize\")\n",
    "ax.plot(x_axes, y_axes_2, label=\"TextRank summarize\")\n",
    "\n",
    "\n",
    "legend = ax.legend(loc = \"upper right\", fontsize = \"x-large\")    \n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-08-21T14:10:17.485905Z",
     "start_time": "2020-08-21T14:10:17.483888Z"
    }
   },
   "outputs": [],
   "source": [
    "#from summarizer.tokenizer import words\n",
    "#\n",
    "#avg_length = 0\n",
    "#for summary in GISMO_SUMMARIES:\n",
    "#    avg_length += len(words(summary))\n",
    "#avg_length /= len(GISMO_SUMMARIES)\n",
    "#WORD_COUNT = int(avg_length)\n",
    "#print(WORD_COUNT)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-09-30T07:28:43.876386Z",
     "start_time": "2020-09-30T07:28:43.873032Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean computation time of Gismo summarizer : 2.267292610000001 seconds\n",
      "Mean computation time of TextRank summarizer : 0.9012875099999996 seconds\n",
      "Gismo based summarizer is 0.3975170677242225 times faster than TextRank summarizer\n"
     ]
    }
   ],
   "source": [
    "print(\"Mean computation time of Gismo summarizer : %s seconds\" % mean_computation_time_gismo)\n",
    "print(\"Mean computation time of TextRank summarizer : %s seconds\" % mean_computation_time_gensim)\n",
    "print(\"Gismo based summarizer is %s times faster than TextRank summarizer\" % \\\n",
    "      (mean_computation_time_gensim / mean_computation_time_gismo))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-09-30T07:28:43.882721Z",
     "start_time": "2020-09-30T07:28:43.878024Z"
    },
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "97\n"
     ]
    }
   ],
   "source": [
    "SUMMARIES = list()\n",
    "# To compute our summaries\n",
    "cpt = 0\n",
    "for i in rand_indexes:\n",
    "    abstract = DOCUMENTS[i][\"abstract\"]\n",
    "    if GISMO_SUMMARIES[cpt] != \"\" and TEXTRANK_SUMMARIES[cpt] != \"\":\n",
    "        SUMMARIES.append(\n",
    "            {\n",
    "                \"ref_sum\" : abstract,\n",
    "                \"our_sum\" : GISMO_SUMMARIES[cpt],\n",
    "                \"gensim_sum\" : TEXTRANK_SUMMARIES[cpt]\n",
    "            } \n",
    "        )\n",
    "    cpt += 1\n",
    "print(len(SUMMARIES))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Execution time comparision"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-09-30T07:28:43.901398Z",
     "start_time": "2020-09-30T07:28:43.884525Z"
    }
   },
   "outputs": [],
   "source": [
    "import tikzplotlib"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-09-09T08:43:00.789961Z",
     "start_time": "2020-09-09T08:43:00.576610Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "def make_times_plot(gismo_times :list, textrank_times :list):\n",
    "    x_vect = [i for i in range(0, len(gismo_times))]\n",
    "    x_axes = [(100 / len(gismo_times)) * i for i in x_vect]\n",
    "    y_axes_1 = np.log(np.cumsum(gismo_times))\n",
    "    y_axes_2 = np.log(np.cumsum(textrank_times))\n",
    "        \n",
    "    fig = plt.figure(figsize=(10, 8))\n",
    "    ax = fig.add_subplot(1, 1, 1)\n",
    "    plt.xlabel(\"Documents\", fontsize = \"x-large\")\n",
    "    plt.ylabel(\"Log des temps d'exécution en secondes\", fontsize = \"x-large\")\n",
    "    plt.title(\"Log des sommes cumulées des temps d'exécution\", fontsize = \"x-large\") \n",
    "\n",
    "    ax.plot(x_axes, y_axes_1, label=\"Gismo\")\n",
    "    ax.plot(x_axes, y_axes_2, label=\"TextRank\")\n",
    "\n",
    "    legend = ax.legend(loc = \"upper right\", fontsize = \"x-large\")    \n",
    "\n",
    "    plt.show()\n",
    "make_times_plot(GISMO_TIMES, TEXTRANK_TIMES)\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## ROUGE metrics\n",
    "\n",
    "The implementation of these metrics is based on Lin's article [ROUGE : A Package for Automatic Evaluation of Summaries](https://www.aclweb.org/anthology/W04-1013/)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-09-30T07:28:43.913618Z",
     "start_time": "2020-09-30T07:28:43.903637Z"
    },
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "from summarizer.measures import make_rouge_scores, make_scores_plot, make_diff_scores_plot\n",
    "from summarizer.measures import rouge_l, rouge_n, rouge_s\n",
    "def make_rouge_scores(summaries :list, candidate_key :str, ref_key :str) -> dict:\n",
    "    \"\"\"\n",
    "    Computes ROUGE scores for a list of candidate summaries and the corresponding reference summaries\n",
    "    Args:\n",
    "        summaries: A `list` of dictionnaries.\n",
    "        candidate_key: A string corresponding to the candidate summary in the dictionnaries.\n",
    "        ref_key: A string corresponding to the reference summary in the dictionnaries.\n",
    "    Returns:\n",
    "        A dictionnary containing a list for each score\n",
    "    \"\"\"\n",
    "    scores =  {\n",
    "        \"rouge-1\" : list(),\n",
    "        \"rouge-2\" : list(),\n",
    "#        \"rouge-3\" : list(),\n",
    "#        \"rouge-4\" : list(),\n",
    "        \"rouge-l\" : list(),\n",
    "        \"rouge-s\" : list()\n",
    "    }\n",
    "    for (index_d, summaries) in enumerate(summaries):\n",
    "        hypothesis = summaries[candidate_key] \n",
    "        abstract = summaries[ref_key]\n",
    "        \n",
    "        try:\n",
    "            scores[\"rouge-1\"].append(rouge_n(hypothesis, abstract, 1))\n",
    "        except:\n",
    "            print(\"rouge 1 marche pas\")\n",
    "            print(\"sum : \", hypothesis)\n",
    "            print(\"abstract : \", abstract)\n",
    "        \n",
    "        try:\n",
    "            scores[\"rouge-2\"].append(rouge_n(hypothesis, abstract, 2))\n",
    "        except:\n",
    "            print(\"rouge 2 marche pas\")\n",
    "            print(\"sum : \", hypothesis)\n",
    "            print(\"abstract : \", abstract)\n",
    "        try:\n",
    "            scores[\"rouge-l\"].append(rouge_l(hypothesis, abstract, beta = 1))\n",
    "        except:\n",
    "            print(\"rouge L marche pas\")\n",
    "            print(\"sum : \", hypothesis)\n",
    "            print(\"abstract : \", abstract)\n",
    "        try:\n",
    "            scores[\"rouge-s\"].append(rouge_s(hypothesis, abstract, beta = 1))\n",
    "        except:\n",
    "            print(\"rouge S marche pas\")\n",
    "            print(\"sum : \", hypothesis)\n",
    "            print(\"abstract : \", abstract)\n",
    "    return scores\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-09-30T07:28:59.588744Z",
     "start_time": "2020-09-30T07:28:43.915191Z"
    },
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "GENSIM_SCORES = make_rouge_scores(SUMMARIES, \"gensim_sum\", \"ref_sum\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-09-30T07:29:15.815478Z",
     "start_time": "2020-09-30T07:28:59.590455Z"
    }
   },
   "outputs": [],
   "source": [
    "OUR_SCORES = make_rouge_scores(SUMMARIES, \"our_sum\", \"ref_sum\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-09-30T07:30:11.540563Z",
     "start_time": "2020-09-30T07:30:11.381992Z"
    },
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "def make_cdf(gismo_scores :list, textrank_scores :list, score_name :str):\n",
    "    #x_axes = [i for i in range(0, len(SUMMARIES))]\n",
    "    #y_axes_1 = np.cumsum(sorted(gismo_scores))\n",
    "    #y_axes_2 = np.cumsum(sorted(textrank_scores))\n",
    "        \n",
    "    x, y = sorted(gismo_scores), np.arange(len(gismo_scores)) / len(gismo_scores)\n",
    "    x2, y2 = sorted(textrank_scores), np.arange(len(textrank_scores)) / len(textrank_scores)\n",
    "        \n",
    "    fig = plt.figure(figsize=(10, 8))\n",
    "    ax = fig.add_subplot(1, 1, 1)\n",
    "    #plt.xlabel(\"Documents percentage\", fontsize = \"x-large\")\n",
    "    #plt.ylabel(score_name, fontsize = \"x-large\")\n",
    "    #plt.title(\"Cumulative sum of \" + score_name + \" scores\", fontsize = \"x-large\") \n",
    "\n",
    "    plt.xlabel(\"Score\", fontsize = \"x-large\")\n",
    "    plt.ylabel(\"Fonction de distribution cumulative\", fontsize = \"x-large\")\n",
    "    plt.title(score_name, fontsize = \"x-large\")\n",
    "    \n",
    "    ax.plot(x, y, label=\"Gismo\")\n",
    "    ax.plot(x2, y2, label=\"TextRank\")\n",
    "\n",
    "    legend = ax.legend(loc = \"upper right\", fontsize = \"x-large\")  \n",
    "    tikzplotlib.save(\"results/cosine_sim.tex\")\n",
    "    plt.show()\n",
    "for score_name in [\"rouge-1\"]:#, \"rouge-2\", \"rouge-l\", \"rouge-s\"]:\n",
    "    make_cdf(OUR_SCORES[score_name], GENSIM_SCORES[score_name], score_name)  \n",
    "    #cdf(OUR_SCORES[score_name], GENSIM_SCORES[score_name])\n",
    "    \n",
    "#def cdf(data, data2):\n",
    "#    x, y = sorted(data), np.arange(len(data)) / len(data)\n",
    "#    x2, y2 = sorted(data2), np.arange(len(data2)) / len(data2)\n",
    "#    plt.plot(x, y)\n",
    "#    plt.plot(x2, y2)\n",
    "#cdf(GISMO_TIMES, TEXTRANK_TIMES)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-09-09T08:43:49.951854Z",
     "start_time": "2020-09-09T08:43:49.949991Z"
    },
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "#get_abstract(DOCUMENTS[267])\n",
    "#test = 'Oligonucleotide-directed mutagenesis was'\n",
    "#make_sentences(test)\n",
    "#make_vocab(test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-09-09T08:43:49.959144Z",
     "start_time": "2020-09-09T08:43:49.953744Z"
    },
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "moyenne rouge-1 Gismo : 0.4247599168029938, moyenne rouge-1 TextRank : 0.4130339159807649\n",
      "moyenne rouge-2 Gismo : 0.17307307061462499, moyenne rouge-2 TextRank : 0.13015854235029245\n",
      "moyenne rouge-l Gismo : 0.32950102231317296, moyenne rouge-l TextRank : 0.35863914448436035\n",
      "moyenne rouge-s Gismo : 0.08983885061710079, moyenne rouge-s TextRank : 0.09771816400275737\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "\n",
    "for score_name in [\"rouge-1\", \"rouge-2\", \"rouge-l\", \"rouge-s\"]:\n",
    "    #make_scores_plot(OUR_SCORES[score_name], GENSIM_SCORES[score_name], score_name)  \n",
    "    #make_diff_scores_plot(OUR_SCORES[score_name], GENSIM_SCORES[score_name], score_name, len(SUMMARIES))  \n",
    "    print(\n",
    "        \"moyenne %(score)s Gismo : %(ours)s, moyenne %(score)s TextRank : %(gensims)s\" % {\n",
    "            \"score\"   : score_name,\n",
    "            \"ours\"    : np.mean(OUR_SCORES[score_name]),\n",
    "            \"gensims\" : np.mean(GENSIM_SCORES[score_name])\n",
    "        }\n",
    "    )\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Comparing cosine similarities"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-09-30T07:30:17.288718Z",
     "start_time": "2020-09-30T07:30:16.659257Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "moyenne cosine similarity Gismo : 0.010903622409463331, moyenne cosine similarity TextRank : 0.011769514549838635\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "from summarizer.measures import cosine_sim, make_scores, make_scores_plot, make_diff_scores_plot\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "OUR_COS_SIM = make_scores(SUMMARIES, \"our_sum\", \"ref_sum\", cosine_sim, EMBEDDING)\n",
    "GENSIM_COS_SIM = make_scores(SUMMARIES, \"gensim_sum\", \"ref_sum\", cosine_sim, EMBEDDING)\n",
    "#make_scores_plot(OUR_COS_SIM, GENSIM_COS_SIM, \"Cosine Similarity\")\n",
    "#make_diff_scores_plot(OUR_COS_SIM, GENSIM_COS_SIM, \"Cosine Similarity\", len(SUMMARIES))\n",
    "\n",
    "print(\n",
    "    \"moyenne cosine similarity Gismo : %(ours)s, moyenne cosine similarity TextRank : %(gensims)s\" % {\n",
    "        \"ours\"    : np.mean(OUR_COS_SIM),\n",
    "        \"gensims\" : np.mean(GENSIM_COS_SIM)\n",
    "    }\n",
    ")\n",
    "#CUMSUM\n",
    "#x_axes = [i for i in range(0, len(SUMMARIES))]\n",
    "##x_axes = [(100 / len(gismo_times)) * i for i in x_vect]\n",
    "#y_axes_1 = np.cumsum(sorted(OUR_COS_SIM))\n",
    "#y_axes_2 = np.cumsum(sorted(GENSIM_COS_SIM))\n",
    "#\n",
    "#fig = plt.figure(figsize=(10, 8))\n",
    "#ax = fig.add_subplot(1, 1, 1)\n",
    "#plt.xlabel(\"Documents percentage\", fontsize = \"x-large\")\n",
    "#plt.ylabel(\"Cosine similarity\", fontsize = \"x-large\")\n",
    "#plt.title(\"Cumulative sum of cosine similarity scores\", fontsize = \"x-large\") \n",
    "#\n",
    "#ax.plot(x_axes, y_axes_1, label=\"Gismo\")\n",
    "#ax.plot(x_axes, y_axes_2, label=\"TextRank\")\n",
    "#\n",
    "#legend = ax.legend(loc = \"upper right\", fontsize = \"x-large\")    \n",
    "#plt.show()\n",
    "\n",
    "make_cdf(OUR_COS_SIM, GENSIM_COS_SIM, \"Cosine Similarity\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Extended Jaccard similarity"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-08-21T14:10:58.358687Z",
     "start_time": "2020-08-21T14:10:58.352608Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.0000000000000002"
      ]
     },
     "execution_count": 138,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "from summarizer.measures import extended_jaccard\n",
    "\n",
    "p = np.array([1, 1, 2])\n",
    "q = np.array([1, 1, 2])\n",
    "extended_jaccard(p, q)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 139,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-08-21T14:10:59.301820Z",
     "start_time": "2020-08-21T14:10:58.360872Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "moyenne extended Jaccard similarity Gismo : 0.24651472455644696,\n",
      "     moyenne extended Jaccard similarity TextRank : 0.2513097175671632\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 720x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from summarizer.measures import make_scores, make_scores_plot\n",
    "\n",
    "OUR_JAC_SIM = make_scores(SUMMARIES, \"our_sum\", \"ref_sum\", extended_jaccard, EMBEDDING)\n",
    "GENSIM_JAC_SIM = make_scores(SUMMARIES, \"gensim_sum\", \"ref_sum\", extended_jaccard, EMBEDDING)\n",
    "#make_scores_plot(OUR_JAC_SIM, GENSIM_JAC_SIM, \"Extended Jaccard Similarity\")\n",
    "#make_diff_scores_plot(OUR_JAC_SIM, GENSIM_JAC_SIM, \"Extended Jaccard Similarity\", len(SUMMARIES))\n",
    "\n",
    "print(\n",
    "    \"moyenne extended Jaccard similarity Gismo : %(ours)s,\\n\\\n",
    "     moyenne extended Jaccard similarity TextRank : %(gensims)s\" % {\n",
    "        \"ours\"    : np.mean(OUR_JAC_SIM),\n",
    "        \"gensims\" : np.mean(GENSIM_JAC_SIM)\n",
    "    }\n",
    ")\n",
    "\n",
    "##CUMSUM\n",
    "#x_axes = [i for i in range(0, len(SUMMARIES))]\n",
    "##x_axes = [(100 / len(gismo_times)) * i for i in x_vect]\n",
    "#y_axes_1 = np.cumsum(sorted(OUR_JAC_SIM))\n",
    "#y_axes_2 = np.cumsum(sorted(GENSIM_JAC_SIM))\n",
    "#\n",
    "#fig = plt.figure(figsize=(10, 8))\n",
    "#ax = fig.add_subplot(1, 1, 1)\n",
    "#plt.xlabel(\"Documents percentage\", fontsize = \"x-large\")\n",
    "#plt.ylabel(\"Extended Jaccard similarity\", fontsize = \"x-large\")\n",
    "#plt.title(\"Cumulative sum of extended jaccard scores\", fontsize = \"x-large\") \n",
    "#\n",
    "#ax.plot(x_axes, y_axes_1, label=\"Gismo\")\n",
    "#ax.plot(x_axes, y_axes_2, label=\"TextRank\")\n",
    "#\n",
    "#legend = ax.legend(loc = \"upper right\", fontsize = \"x-large\")    \n",
    "#plt.show()\n",
    "make_cdf(OUR_JAC_SIM, GENSIM_JAC_SIM, \"Extended Jaccard Similarity\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Kullback-Leibler(KL) Divergence\n",
    "This is not a metric, $D_{KL}(P, Q)$ tells us how much $P$ diverges from $Q$. Our distribution will have a lot of zeros, so computing the KL divergence between them requires a smoothing operation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-08-21T13:41:15.858061Z",
     "start_time": "2020-08-21T13:41:15.846128Z"
    },
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "229.09022684922803\n",
      "0.0\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "from summarizer.measures import div_kl\n",
    "\n",
    "p = np.array([0.0, 0.1, 0.0, 0.3, 0.1, 0, 0.5])\n",
    "q = np.array([0.1, 0, 0.3, 0, 0, 0.6, 0])\n",
    "print(div_kl(p, q, 10 ** (-100)))\n",
    "print(div_kl(p, p, 10 ** (-100)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-08-21T13:41:21.837101Z",
     "start_time": "2020-08-21T13:41:21.511021Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "moyenne KL divergence Gismo : 412.04701731181376,\n",
      "     moyenne KL divergence TextRank : 416.095110780232\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from summarizer.measures import div_kl, make_scores, make_scores_plot\n",
    "from functools import partial\n",
    "\n",
    "OUR_DKL = make_scores(SUMMARIES, \"our_sum\", \"ref_sum\",\n",
    "                      partial(div_kl, smallest_float = 10 ** (-300)), EMBEDDING)\n",
    "GENSIM_DKL = make_scores(SUMMARIES, \"gensim_sum\", \"ref_sum\",\n",
    "                      partial(div_kl, smallest_float = 10 ** (-300)), EMBEDDING)\n",
    "\n",
    "#make_scores_plot(OUR_DKL, GENSIM_DKL, \"Kullback-Leibler Divergence\")\n",
    "#make_diff_scores_plot(OUR_DKL, GENSIM_DKL, \"Kullback-Leibler Divergence\", len(SUMMARIES))\n",
    "\n",
    "print(\n",
    "    \"moyenne KL divergence Gismo : %(ours)s,\\n\\\n",
    "     moyenne KL divergence TextRank : %(gensims)s\" % {\n",
    "        \"ours\"    : np.mean(OUR_DKL),\n",
    "        \"gensims\" : np.mean(GENSIM_DKL)\n",
    "    }\n",
    ")\n",
    "\n",
    "##CUMSUM\n",
    "#x_axes = [i for i in range(0, len(SUMMARIES))]\n",
    "##x_axes = [(100 / len(gismo_times)) * i for i in x_vect]\n",
    "#y_axes_1 = np.cumsum(sorted(OUR_DKL))\n",
    "#y_axes_2 = np.cumsum(sorted(GENSIM_DKL))\n",
    "#\n",
    "#fig = plt.figure(figsize=(10, 8))\n",
    "#ax = fig.add_subplot(1, 1, 1)\n",
    "#plt.xlabel(\"Documents percentage\", fontsize = \"x-large\")\n",
    "#plt.ylabel(\"KL divergence\", fontsize = \"x-large\")\n",
    "#plt.title(\"Cumulative sum of KL divergence scores\", fontsize = \"x-large\") \n",
    "#\n",
    "#ax.plot(x_axes, y_axes_1, label=\"Gismo\")\n",
    "#ax.plot(x_axes, y_axes_2, label=\"TextRank\")\n",
    "#\n",
    "#legend = ax.legend(loc = \"upper right\", fontsize = \"x-large\")    \n",
    "#plt.show()\n",
    "make_cdf(OUR_DKL, GENSIM_DKL, \"KL divergence\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If we choose to compote the divergence of $P$ from $Q$ on the support of $Q$, the results are the following : it doesn't work anymore and sometimes gives negative values because the sum of V on the support of W is not 1 anymore "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-08-19T14:02:38.894291Z",
     "start_time": "2020-08-19T14:02:38.879939Z"
    },
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-0.062040453286260996\n",
      "0.4740018485633234\n",
      "0.0\n"
     ]
    }
   ],
   "source": [
    "import copy\n",
    "import numpy as np\n",
    "import scipy\n",
    "\n",
    "def div_kl_csr(V, W) -> float: # On the support of W only\n",
    "    Vbis = V.copy()\n",
    "    Wbis = W.copy()\n",
    "    F = scipy.sparse.dok_matrix(Vbis.shape)\n",
    "    F[Wbis.nonzero()] = Vbis[Wbis.nonzero()] / Wbis[Wbis.nonzero()]\n",
    "    F = F.tocsr()\n",
    "    F.data = np.log(F.data)\n",
    "    F = F.multiply(V)   \n",
    "    return np.sum(F)\n",
    "    #relative_entropy = scipy.special.rel_entr(V.todense()[0], W.todense()[0])\n",
    "    #return np.sum(relative_entropy, axis = 1)\n",
    "\n",
    "V = EMBEDDING.x.getrow(2)\n",
    "W = EMBEDDING.x.getrow(53)\n",
    "\n",
    "print(div_kl_csr(W, V))\n",
    "print(div_kl_csr(V, W))\n",
    "print(div_kl_csr(V, V))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-08-19T14:02:39.560608Z",
     "start_time": "2020-08-19T14:02:38.896017Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAmUAAAH1CAYAAAC3AYn5AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjMuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/d3fzzAAAACXBIWXMAAAsTAAALEwEAmpwYAABTDUlEQVR4nO3daZgU5fX38e9hAGVRcEFRlMVIVEQRRc0o6hBU1BhN1L/7GhUT4x4fcXeUKGpco9EE16DijokxqFEE3IgyIC6AECK4AGFQETeQ7TwvqmZomp6emumtuvv3ua6+Zrqquup0dVf36XPfdZe5OyIiIiJSWC0KHYCIiIiIKCkTERERiQUlZSIiIiIxoKRMREREJAaUlImIiIjEgJIyERERkRhQUiYiTWJmVWbmZrZFoWOJysxONrMVhY6j3BXje0ckn5SUiWRR+IWT7jYnw/X3D9fTPWl6dcI2VpnZfDN7xsy2y2R7cWdmFWZ2pplNMLPFZvadmU03s/vNrF/Coo8DXQoVp9R7E9gMmFfoQETiSEmZSHZtlnA7PJy2c8K0XXO47TnhNroAhwIbAKPNrHUOt1kwZtYK+CdwPfA3YBCwHXAC8BFwS92y7r7E3RcUIEwJmVkrd1/m7v9z91U53E5Jvt+lPCgpE8mi8Avnf+7+P+DLcPLChGldzexfZvatmS00s1Fm1g3AzDY0s0/N7Pa69ZnZJmHV67qwOvZaOGt2WBUbl7D5leF25rv728DNQHdgm4T1XRtWkr4Pt/VnM+uQMP9kM1thZnua2eRwuUlm1mAyaWYtzOzOcH29Gpj/iZldmjR9HTNbZGanhff7m9kbZvZNeHvXzAal2d3nAPsD+7r7De7+b3f/xN1r3P33wD7Jzyvh/vpm9oCZ/c/MfghjvyVh/jgzu8/Mfm9mtWb2VbjvWpjZlWa2IHz9rk16TuuZ2V/CeT+YWY2Z7Z/mOWBmW5jZ02b2uZktNbOPzOz/JcyfY2aXJz3m3sTXPoN455jZUDO7O3xMrZmdFb42d4Svz1wzOyvpceea2ZTwffw/M3vMzDZLmF/XTPkzM3vdzJYCp1lS82UYd6qK8skJ6zrbzD4M981/zOwyM2uZ9Bx+b2Z3mdkXrD5GRIqOkjKRPAkTlvHABKAf8FNgJfCSma3r7l8CxwFnmtnPzcyAh4DZwJXApwQVMIDdCKpihzWwrQ2A48O7yxJmLQEGA72Ak4Eq4I9JD28BDAPOJajy1QJPJH4RJmxnXeBJYACwh7tPS14mrIo8TFDBSnQosC7wZLjuZ4G3wm3uDFQD36d6fqETgJfDBHQtnv4acr8Pt3Eo0BM4CpietMwRQCugP3ABcClBZa49sBdwIXCpmR2Y8Jj7CSp2xwM7AW8Az5nZtmliuQvoAOwLbAucCnyWZvmGNCdegLOB/xC8J/8I3AE8Q/C+2xW4E/hjioT7QmAH4JdAV+CxFDHdDNxAUMH8R4r5h7Fmdfn3wHfARAia5cPtXBKu41zgDOCqpPWcQ/A+rQROSbEdkeLg7rrpplsObgQJjwNbhPcfBB5LWmYdgsTjFwnTrgI+J/hCWwR0S5jXP1xn96T1VAOrgG8JvtQ8vD3VSIy/BH4AWoT3Tw4ft3PCMruH07ZJel47AK8CrwMbNLKdbcPH7Jow7Tng0fD/DcL5VU3Yv98DtydNuyHcB3W3rgnPa0XCcn8HHkyz7nHAlKRpU4H3k6a9C9wU/r91+BwOSlpmMnB/mm29C1SnmT8HuDxp2r3AuEziTVj33xLutwC+Bv6RNG0RcFaaGPuGz71L0nvkhHTHRNK8A8L34s/D+23D1/iApOVOBL5Keg5jmnuc6qZbnG6qlInkz67AL8Mmn2/N7FvgC4JqUc+E5YYCMwmqHb92948jrv9TgupMP4LKwYfArxMXMLPDzOxVM5sXbv8RoDXQOWExJ/jyrlPXKXvTpO39M/y7n7svSheYu38IvE1YLTOzTQgqSiPC+YsIEo0Xzex5M7vYzLZpaH2JTynp/h8I9sGpQDsabg24CzjCzD4ws9vN7EAzS1723aT7/wPeSzFtk/D/ukrSq0nLvAps3+AzgNsIKlhvmdkNZrZ3mmXTaWq8az3Og6rmwsTHhdNqEx8XNkO+GDb7fkOQmAN0S1p3yipmMjPbnuBkjCHuXldR2x5oAzyddMz8BehgZp2auh2RuFNSJpI/LQiaI3dKuv2YICGps1k4bWX4N6rl7j7L3ae7+x3AKODRuplmtjtBU+OrBBWynVmdtCV2jl7l7isT7tc1AyZ/XvwD2IWgySiKEcDRFnTQP5agGviv+o24nx6u7yWC/mAfmNkZadY3k6BJa3Wg7p+7+yxgbrpA3P1Fgia3awmS4oeBV8ysImGx5ckPa2BaRp+j7v4AQTLzZ4LX/nkzezhhkVWsnXy2SrGq5sbbpMeZWVdgNEGF6miCHwGHhMsld7L/LkWcawgT9OeAh939toRZdXH+H2seLzsQ/Ij5MmHZRrcjUgyUlInkTw2wI/DfMHlKvC2CoFM8QfXqXYJ+Tlea2R4J66jrH5aYPDTkD8BPzKyu31l/4HN3v9zd33L3mUAm40UNI2hqfa6xzuyhRwn6Th1A0AT1SFLyh7t/4O63uPuBwH0E/d8a8jAw0MyiJoVrcPcv3f1Rdz8D+BlBIrjWiQpNMDX8m1zp2hv4oJFY5rv7A+5+IkGV7zgzWz+cXQtsnvSQvhnEmaldCSpY57n7G+4+g7WrqJGY2ToEZ85+SFDdTTQVWApsleJ4mZX83hEpBWt13BWRnLmOoJnlYQvOsFxIcHbkLwj6Rn0EXEbQbNPH3eeZ2XBgpJnt5O5fAR8TVE4OMrPHgR/cfXGqjbn7V2Z2L/B7M/s7MAPoZGanAmMJkrQzM3lC7n6TmS0H/m5mh7v76DTLfmlm/wSuIah4nFQ3z8y2Bk4nqL59SpCE7EXQH6shtxM0gf4rPKtwLEHzXBdWJ3Mpv7jD5ScRfPGvIjjB4lvgk0aecoPc/b9m9iRwV1jh+xj4DdCboDKYkpndSVB5mkFQtTuMYB98Ey7yMsHJH8+E6/w1QWXty7XXlhf/Iaic/c7MHgH6EJyI0hx/IagOnkzw3qybvtjdvzWz64DrzMwJ9kNLgkpZX3cf0vynIBJPqpSJ5Im7Twf2IDgb7kVgGnAPQdXhq7AidiXwK3ev68f1O2AxMDxcxwKCM9EuBuYTdFhP51aCpp4T3P05gua664D3CZqe/l+ax0Z9XrcT9H8bZWaHNrL4XwkSsinu/n7C9O/COB8jaJZ8mmCg0bOSV5Cw3eXAgQRnGf6S4Ev7PwQVuRZAf3f/tIGHLyVIDiexuoJ5YEMJbhOcRvDaPkxQ7dwTODjsU9cQI+hX9gFB03K7MJa6ZuMbCPrvPU4w3MNigmbognD39wjO2DyD4D18IXBeM1dXRfDDZAbB+7nudlS4raEE763TCfbn68D5BE2nIiXHVh/3IiIiIlIoqpSJiIiIxICSMhEREZEYUFImIiIiEgNKykRERERiQEmZiIiISAwU/ThlG2+8sXfv3r3QYYiIiIg0atKkSZ+7e6dU84o+KevevTs1NTWFDkNERESkUWbW4PWM1XwpIiIiEgNKykRERERiQEmZiIiISAwoKRMRERGJASVlIiIiIjFQ9GdfiohI8fn666+pra1l+fLlhQ5FJGtatWrFJptswvrrr9+sxyspExGRvPr6669ZsGABXbp0oU2bNphZoUMSyZi7s2TJEubOnQvQrMRMzZciIpJXtbW1dOnShbZt2yohk5JhZrRt25YuXbpQW1vbrHUoKRMRkbxavnw5bdq0KXQYIjnRpk2bZjfLKykTEZG8U4VMSlUm720lZSIiIiIxoKRMREQkB04++WT23XffQochRURJmYiISBN8+eWXXHLJJfTq1Yu2bduywQYbsNNOO3HZZZfx6aef1i93++238+STTxYwUik2GhJDREQkok8//ZT+/fvTsmVLqqur6dOnDx06dGD27Nk89thj3HTTTdx+++0AdOjQocDRlrdVq1bh7lRUVBQ6lMhUKRMRkaJWPa46b9s688wzWbZsGe+88w4nnHACO+64I926daOqqoo///nP3HbbbfXLJjdfTp06lUGDBtGxY0fatWvHdtttx0MPPVQ/38y44447OOqoo2jXrh1du3blqaeeYvHixRx33HGst956bLXVVjz99NNrxDRjxgx+9rOf0b59e9q3b8/Pf/5zZs2alfZ5vP766+y5556st956rLfeevTp04cXX3wRgDlz5mBmvP7662s8Zuutt6a6ujqjeOvWPXLkSAYNGkTbtm3ZdtttGT9+PHPnzuWggw6iXbt29OrVi9dee63+ce7O6aefzo9+9CPatGnDVlttxaWXXsoPP/xQv0x1dTVbb701jz/+ONtuuy2tW7dm+PDhVFRUrFHBBBgxYgQdOnTgu+++S7uf8k1JmYhEls8vP5Gorh5/dV628+WXXzJ69GjOPvvsBgcGTXfm3THHHMNGG23Em2++yfvvv88tt9zCBhtssMYy1157LQcddBDvvvsuBx98MCeccAJHH300++23H++88w4/+9nPOPHEE/niiy8AWLJkCfvvvz9Lly5l/PjxjB8/nm+//ZYDDjiAZcuWpYxjxYoVHHLIIey+++5MnjyZyZMnU11dTdu2bZu8T5oab50rrriC3/zmN0yZMoXtttuOo48+mpNOOonTTz+dd955h169enHsscfWDy3h7myyySaMHDmS6dOnc9ttt/HAAw9w3XXXrbHeefPmcdddd/HXv/6VadOmcfzxx9OzZ0/uv//+NZa75557OPbYY2nXrl2Tn3NOuXtR33bZZRcXkfygmkKHICVg2rRpWV1fvt6Xb731lgM+atSoNaZXVlZ6u3btvF27dt6rV6/66SeddJIPHDiw/v7666/vDzzwQIPrB/zcc8+tv19bW+uAn3XWWfXTvvzySwf8H//4h7u733vvvd6mTRtfuHBh/TL/+9//fN111/W//vWvKbdTt46xY8emnD979mwH/LXXXltj+o9+9CO/6qqrMoq3bt233npr/TJvv/22A37TTTfVT5s8ebID/v7776eM0d39lltu8a233rr+/lVXXeVm5h9//PEay918883etWtXX7lypbu7T58+3QGfPHlyg+vOVLr3OFDjDeQ0qpSJiEhRmv/NfM5/4XwAxs4em7ftBt+rqz3++ONMmTKFwYMHp20Ou/DCCznttNOoqqqiurqayZMnr7VMnz596v/v1KkTFRUV7LjjjvXTNthgA1q3bl0/YvzUqVPp1asXG2+8cf0ym266Kdtssw1Tp05NGccGG2zAaaedxqBBgzjwwAO5/vrrmTFjRrQnn2G8qR7XuXNngDUeVzct8XH33HMPu+++O5tuuint27fnkksu4eOPP15jvZtuuildu3ZdY9pJJ51EbW1tffPsvffeyy677ELfvn2b9ZxzSUmZiDSqUF9+IumMeHdE0D/psJEc+dSROX9vbr311rRo0YLp06evMX3LLbdk6623ZsMNN0z7+CuuuIKZM2dy5JFH8sEHH/CTn/yEyy+/fI1lWrVqtdbjkqeZGatWrWrmswjcc889TJo0if3224/x48fTu3dv/vKXvwDQokWQGiQnn6lGqW9uvInL1DX5pppW97gnn3yS3/72txx11FGMHj2ad955hyuvvHKtmFI1R2600UYcccQR3HPPPSxbtowRI0YwePDgtZaLAyVlItKofH/5iUQxpP8Qbhl0C8fscAxPHPEEE+dNzOn2NtxwQw488EDuuOMOFi9e3Kx1bLXVVpx55pk89dRTXHPNNdx9990ZxbT99tszbdo0Pv/88/ppCxYsYMaMGfTu3TvtY3v37s0FF1zA888/z6mnnsrw4cOBoOIFQf+sOrW1tfUX2i6EV199lb59+3LBBRewyy670LNnT+bMmRP58WeccQb/+Mc/+Mtf/sKSJUs45phjchdsBjQkhog0akj/IfX/d27fmYnzJjKgx4ACRiSypgE9BuTlPXnXXXex55570rdvX6qrq9lpp51o3749M2bM4Lnnnmtw+IVvv/2WIUOGcPjhh9OjRw+++uorXnjhBXr16pVRPMceeyzXXHMNRx11FH/4wx9wdy688EK6dOnCUUcdlfIxs2bN4p577uHnP/85W265JfPmzeO1115j5513BoJrN+65557ceOONbLvttqxYsYLLLruMddZZJ6NYM7HNNttw33338fe//53evXvz3HPPMWrUqMiP79+/P9tssw0XXnghJ554Iuutt14Oo20+VcpEpEkG9BjARXteVOgwRAqia9euvPPOO/zf//0fw4YNY/fdd2f77bfnd7/7HZWVlYwZMybl41q2bMmiRYs49dRT2W677Rg0aBCbbropI0eOzCieNm3a8K9//Yt11lmHvffem3322Yd27drxwgsv0Lp165SPadeuHf/5z384+uij+fGPf8zhhx/OHnvswZ133lm/zP3330/79u3ZY489OProoxk8eDCbbbZZRrFm4owzzuCEE07glFNOoW/fvrz11ltrDM8Rxemnn86yZcti23QJYMltxsWmX79+XlNTU+gwREQkounTp7PddtsVOgwpMxdddBEvvfQS77zzTs63le49bmaT3L1fqnlqvhQREZGStXjxYmbOnMnw4cP54x//WOhw0lLzpYiIiJSsQw89lL333ptf/vKXHH/88YUOJy1VykRERKRkjRs3rtAhRKZKmYiIiEgMKCkTERERiQElZSIiIiIxkLekzMy2NLOxZjbNzKaa2bkpljEz+6OZzTKz98xs53zFJyIiIlJI+ezovwL4nbtPNrP1gElm9pK7T0tY5kCgZ3jbHbg7/CsiIiJS0vJWKXP3+e4+Ofz/G2A60CVpsUOBER74N9DRzAo3hLCIiIhInhSkT5mZdQf6Am8lzeoCfJpw/zPWTtxEREQkS7p3787vf//7QochFCApM7P2wNPAee7+dTPXMdjMasysZuHChdkNUEREJAUzS3vr3r17Rut//fXXMTPmzJmTlXil+OR18Fgza0WQkD3i7qku7z4X2DLh/hbhtDW4+3BgOATXvsxBqCIiImuYP39+/f9vvvkmhx9+OJMnT66/UHdFRUVe4li+fDmtWrXKy7bKWSH2cz7PvjTgPmC6u9/SwGLPAieGZ2H+BFjs7vMbWFZERCRvOnfuXH/bcMMNAejUqVP9tE8++YT999+f9u3b06lTJw477DA+/vhjAL788ku23HJLzj139cADtbW1bLbZZlx66aXMmTOHvfbaC4AePXpgZlRVVQFw8skns++++3LHHXfQvXt31llnHZYsWcJLL71EVVUVG264IR06dGCfffbh7bffXiNmM+Ouu+7ihBNOYL311mOLLbZg2LBhaZ/nyy+/TMeOHbntttsaXObvf/87ffv2pW3btnTs2JHddtut/kLf48aNw8z47LPP1nhMy5YtefDBBwGYM2cOZsbIkSMZNGgQbdu2Zdttt2X8+PHMnTuXgw46iHbt2tGrVy9ee+21+nXUrXv06NFUVlbSpk0bdtllF6ZOncrUqVPp378/bdu2ZbfddmPatNXnES5atIjjjz+erl270qZNG7bZZhtuvvlm3FfXdVLt57vvvpuOHTvy/fffr/FcrrnmGnr27LnG47PC3fNyA/oDDrwHTAlvBwG/Bn4dLmPAn4D/Au8D/Rpb7y677OIiIlI8pk2blrV1vfmm+3XXBX/zaezYsQ74p59+6u7uU6dO9Xbt2vmVV17p06dP9/fee8+POOII79mzpy9ZssTd3cePH+8tW7b0Z5991letWuX777+/V1ZW+vLly33FihX+97//3QF/++23ff78+f7FF1+4u/tJJ53k6623nv/iF7/wKVOm+HvvvecrVqzwUaNG+eOPP+4ffvihf/DBB37qqaf6Bhts4J9//nl9nIBvsskmPnz4cJ81a5bfeeedDvjLL79cv0y3bt186NCh7u7+8MMPe/v27f3RRx9t8LnPnz/fW7Vq5TfccIN/9NFHPm3aNH/kkUf8vffeS7lv6lRUVPgDDzzg7u6zZ892wLfaait/5plnfMaMGf6LX/zCO3fu7AMHDvRRo0b5jBkz/PDDD/ctttjCly1btsa6d9ppJx8zZoxPnTrVf/KTn/gOO+zge+21l7/88ss+bdo033PPPX233XZbI+Zhw4b5pEmT/KOPPvKHHnrI27Vr5/fff3/9Mqn287fffusdO3b0Bx98sH65lStXerdu3fz6669vcB+le48DNd5QrtTQjGK5KSkTESku2UrK3nzTvU0b94qK4G8+E7PkxOOkk07yo446ao1lli5d6m3atPFnnnmmflp1dbVvtNFGfsEFF3jHjh19zpw59fNee+01B3z27NlrrOekk07yDh06+DfffJM2ppUrV3rHjh394Ycfrp8G+Nlnn73Gcttuu61ffPHF9ffrkrI//OEPvv7666+RsKUyefLklHHWaUpSduutt9bPf/vttx3wm266aa1tvf/++2usO3GfPvHEEw74U089VT9t1KhRDqTdZ+ecc47vu+++9fcb2s9nn32277nnnvX3X3jhBW/VqpUvWLCgwXU3NynTBclFRKQojRsHy5bBypXB33HjoLKyMLFMnDiRWbNm0b59+zWmL126lP/85z/196+44gpefPFFbrnlFh577DG6desWaf3bbbfdWuuePXs2V155JRMmTKC2tpZVq1bx/fff1zeZ1tlpp53WuL/55puzYMGCNaYNHz6c2tpa3njjDXbZZZe0sey4444MGjSI3r17s99++1FVVcVhhx3GlltumfZxqfTp06f+/86dO9evP3labW1tsx/Xvn17Vq1axY033shjjz3GZ599xtKlS1m+fPla+z/Vfj7jjDPo3bs306dPZ7vttuOee+7hkEMOYZNNNmny822MLrMkIiJFqaoKWreGiorgb9gFqyBWrVrFCSecwJQpU9a4zZw5k9NOO61+ufnz5zNz5kwqKiqYOXNm5PW3a9durWkHH3wwn3zyCX/605/497//zZQpU9hkk01YtmzZGsu1bt16jftmxqpVq9aYVllZyXrrrcd9993XaD+piooKnn/+eV555RV23XVXnn76aX784x/z3HPPAdCiRZBaJK5n5cqVa20TWKMjfdD1PPW05Mc29XE333wzw4YN45xzzuGll15iypQpnHbaaWvtq1T7efvtt6d///7cc8891NbW8uyzzzJ48ODUOydDqpSJiEhRqqyEMWOCCllVVeGqZAD9+vXjvffe40c/+lF9QpBs1apVHHfccfTp04czzzyTo48+moEDB7LHHnsAq5OnlStXNrq9L774gmnTpjF69GgGDRoEwGeffbZWRSmqHXbYgSuvvJKBAweyfPlyhg8f3uDzgCDp2W233dhtt9249NJLOeCAA3jggQc4+OCD6ytI8+bNq6+eTZkyJfud4pvg1Vdf5YADDuBXv/pV/bTECmZjzjjjDM477zw23HBDunTpwn777ZeLMFUpExGR4lVZCZdcUtiEDODSSy9l+vTpHH/88bz99tvMnj2bsWPHcu655/LRRx8BcO211zJ16lQeeughDj/8cAYPHsyxxx7LV199BUC3bt1o0aIFo0ePpra2lsWLFze4vQ022IBOnTpxzz33MHPmTCZMmMAxxxxDmzZtmv0ctt9+e8aNG8fo0aM55ZRTUla2IBgOZOjQobz11lt88sknjBkzhvfee49evXoBsPXWW9OtWzeqq6v58MMPef311zn//PPTJnm5ts022zBu3DjGjh3LzJkzufzyy3nrreTx6xt2xBFHADB06FBOO+20nD0XJWUiIiIZ2m677XjzzTf59ttvGTRoEL169eL0009nyZIldOzYkTfffJNrrrmG+++/n8033xwImtQ6dOhQ3xS26aabMmzYMK6//no222wzDj300Aa316JFC5588kn++9//suOOO3LyySdz3nnn1Y+Z1lx1w1K88sornHjiiSmrdh06dGDChAkceuih9OzZk1/96lccd9xxXHHFFUAw9MXjjz9ObW0tffv25be//S3XXnttfbNmIVxxxRXss88+HHrooVRWVrJo0SLOOeecyI9fd911OeGEE1i1atUa1bZss0KWE7OhX79+XlNTU+gwREQkoroO0yLF5Mgjj2T58uU888wzjS6b7j1uZpPcvV+qeepTJiIiItKARYsW8fbbb/PMM88wZsyYnG5LSZmIiIhIA/r27csXX3zBRRddxN57753TbSkpExEREWlAPi8Qr47+IiIiIjGgpExEREQkBpSUiYhI3hX7mf8iDcnkva2kTERE8qpVq1YsWbKk0GGI5MSSJUvWuORTUygpExGRvNpkk02YO3cu33//vSpmUjLcne+//565c+c2+2LlOvtSRETyav311weCayMuX768wNGIZE+rVq3YdNNN69/jTaWkTERE8m799ddv9heXSKlS86WIiIhIDCgpExEREYkBJWUiIiIiMaCkTERERCQGlJSJiIiIxICSMhEREZEYUFImIiIiEgNKykRERERiQEmZiIiISAwoKRMRERGJASVlIiIiIjGgpCyLJkyAYcOCvyIiIiJNoQuSZ8mECTBwICxbBq1bw5gxUFlZ6KhERESkWKhSliXjxgUJ2cqVwd9x4wodkYiIiBQTJWVZUlUVVMgqKoK/VVWFjkhERESKiZovs6SyMmiyHDcuSMjUdCkiIiJNoaQsiyorlYyJiIhI86j5UkRERCQGlJSJiIiIxICSMhEREZEYUFImIiIiEgNKykRERERiQEmZiIiISAwo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\n",
      "text/plain": [
       "<Figure size 720x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "moyenne KL divergence Gismo : -0.00885629311709311,\n",
      "     moyenne KL divergence TextRank : 0.010101046719767035\n"
     ]
    }
   ],
   "source": [
    "from summarizer.measures import div_kl, make_scores, make_scores_plot\n",
    "from functools import partial\n",
    "\n",
    "#OUR_DKL = make_scores(SUMMARIES, \"our_sum\", \"ref_sum\",\n",
    "#                      partial(div_kl, smallest_float = 10 ** (-300)), EMBEDDING)\n",
    "#TEXTRANK_DKL = make_scores(SUMMARIES, \"textrank_sum\", \"ref_sum\",\n",
    "#                      partial(div_kl, smallest_float = 10 ** (-300)), EMBEDDING)\n",
    "\n",
    "OUR_DKL = [\n",
    "    div_kl_csr(\n",
    "        (EMBEDDING.query_projection(summarie[\"our_sum\"]))[0],\n",
    "        (EMBEDDING.query_projection(summarie[\"ref_sum\"]))[0]\n",
    "    )\n",
    "    for summarie in SUMMARIES\n",
    "]\n",
    "\n",
    "TEXTRANK_DKL = [\n",
    "    div_kl_csr(\n",
    "        (EMBEDDING.query_projection(summarie[\"gensim_sum\"]))[0],\n",
    "        (EMBEDDING.query_projection(summarie[\"ref_sum\"]))[0]\n",
    "    )\n",
    "    for summarie in SUMMARIES\n",
    "]\n",
    "\n",
    "\n",
    "make_scores_plot(OUR_DKL, TEXTRANK_DKL, \"Kullback-Leibler Divergence\")\n",
    "make_diff_scores_plot(OUR_DKL, TEXTRANK_DKL, \"Kullback-Leibler Divergence\", len(SUMMARIES))\n",
    "\n",
    "print(\n",
    "    \"moyenne KL divergence Gismo : %(ours)s,\\n\\\n",
    "     moyenne KL divergence TextRank : %(textranks)s\" % {\n",
    "        \"ours\"      : np.mean(OUR_DKL),\n",
    "        \"textranks\" : np.mean(TEXTRANK_DKL)\n",
    "    }\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Mesures de temps en multidoc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-09-08T07:25:15.688382Z",
     "start_time": "2020-09-08T07:25:15.685850Z"
    },
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "import gensim.summarization.summarizer as gen_sum\n",
    "\n",
    "\n",
    "RATIO = 0.04\n",
    "\n",
    "#for i in range(25):\n",
    "#    with open(f\"pickles/multidoc_{i}.txt\", \"w\") as f:\n",
    "#        for doc in DOCUMENTS[1000 * i : max(1000 * (i+1), len(DOCUMENTS))]:\n",
    "#            f.write(doc[\"content\"] + \" \")\n",
    "#    \n",
    "\n",
    "\n",
    "#i = 0\n",
    "#with open(f\"pickles/multidoc_{i}.txt\", \"r\") as f:\n",
    "#    document = f.read()\n",
    "#textrank_start_time = time.clock()\n",
    "#print(gen_sum.summarize(document, word_count = 300)\\\n",
    "#                                .replace(\"\\n\", \" \").replace(\"\\r\",\" \"))#[:num_char]) ratio = RATIO / 100\n",
    "#\n",
    "#print(time.clock() - textrank_start_time)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "start_time": "2020-09-08T07:25:23.483Z"
    }
   },
   "outputs": [],
   "source": [
    "import gensim.summarization.summarizer as gen_sum\n",
    "\n",
    "mean_computation_time_gensim = 0\n",
    "TEXTRANK_TIMES = list()\n",
    "TEXTRANK_SUMMARIES = list()\n",
    "\n",
    "for i in range(25):\n",
    "    #with open(f\"pickles/multidoc_{i}.txt\", \"r\") as f:\n",
    "    #    document = f.read()\n",
    "    document = \" \".join([doc[\"content\"] for doc in DOCUMENTS[100 * i : 100 * (i+1)]])\n",
    "    textrank_start_time = time.clock()\n",
    "    try:\n",
    "        TEXTRANK_SUMMARIES.append(gen_sum.summarize(document, word_count = 300)\\\n",
    "                                        .replace(\"\\n\", \" \").replace(\"\\r\",\" \"))#[:num_char]) ratio = RATIO/100\n",
    "    except:\n",
    "        TEXTRANK_SUMMARIES.append(\"\")\n",
    "    TEXTRANK_TIMES.append(time.clock() - textrank_start_time)\n",
    "    mean_computation_time_gensim += time.clock() - textrank_start_time\n",
    "mean_computation_time_gensim /= len(TEXTRANK_TIMES)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "start_time": "2020-09-08T07:25:28.998Z"
    }
   },
   "outputs": [],
   "source": [
    "print(TEXTRANK_TIMES[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "start_time": "2020-09-08T07:25:29.855Z"
    },
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "from gismo.common import auto_k\n",
    "\n",
    "mean_computation_time_gismo = 0\n",
    "GISMO_TIMES = list()\n",
    "GISMO_SUMMARIES = list()\n",
    "for i in range(25):\n",
    "    num_sentences = 2 * len(make_sentences(TEXTRANK_SUMMARIES[i]))\n",
    "    real_start_time = time.clock()\n",
    "    GISMO_SUMMARIES.append(\" \".join(\n",
    "        summarize(\n",
    "            documents = DOCUMENTS[100 * i : 100 * (i+1)],\n",
    "            query = \"\",\n",
    "            num_sentences = num_sentences,\n",
    "            num_documents = 5,\n",
    "            embedding = EMBEDDING,\n",
    "            weight_s = 1,# Vaut 1 si pas MMR\n",
    "            covering = False, # ni MMR ni covering , on fait du glouton\n",
    "            sim_to_query = False,\n",
    "            itf = True,\n",
    "            #query_distortion = False,\n",
    "            length_textrank = len(TEXTRANK_SUMMARIES[i]),\n",
    "            post = True,\n",
    "            size_generic_query = 5,\n",
    "            #size_generic_query = None,\n",
    "            #target_auto_k = 3\n",
    "        ))#[:len(TEXTRANK_SUMMARIES[i])]\n",
    "        \n",
    "    )\n",
    "    GISMO_TIMES.append(time.clock() - real_start_time)\n",
    "    mean_computation_time_gismo += time.clock() - real_start_time\n",
    "mean_computation_time_gismo /= len(GISMO_TIMES)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "start_time": "2020-09-08T07:25:37.625Z"
    }
   },
   "outputs": [],
   "source": [
    "print(\"Mean computation time of Gismo summarizer : %s seconds\" % mean_computation_time_gismo)\n",
    "print(\"Mean computation time of TextRank summarizer : %s seconds\" % mean_computation_time_gensim)\n",
    "print(\"Gismo based summarizer is %s times faster than TextRank summarizer\" % \\\n",
    "      (mean_computation_time_gensim / mean_computation_time_gismo))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-08-20T09:32:41.634868Z",
     "start_time": "2020-08-20T09:32:41.630702Z"
    },
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "25\n"
     ]
    }
   ],
   "source": [
    "SUMMARIES = list()\n",
    "# To compute our summaries\n",
    "cpt = 0\n",
    "for i in range(25):\n",
    "    abstract = DOCUMENTS[i][\"abstract\"]\n",
    "    if GISMO_SUMMARIES[cpt] != \"\" and TEXTRANK_SUMMARIES[cpt] != \"\":\n",
    "        SUMMARIES.append(\n",
    "            {\n",
    "                \"ref_sum\" : abstract,\n",
    "                \"our_sum\" : GISMO_SUMMARIES[cpt],\n",
    "                \"gensim_sum\" : TEXTRANK_SUMMARIES[cpt]\n",
    "            } \n",
    "        )\n",
    "    cpt += 1\n",
    "print(len(SUMMARIES))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Execution time comparision"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-08-20T09:36:11.266481Z",
     "start_time": "2020-08-20T09:36:11.121707Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "def make_times_plot(gismo_times :list, textrank_times :list):\n",
    "    x_vect = [i for i in range(0, len(gismo_times))]\n",
    "    x_axes = [(100 / len(gismo_times)) * i for i in x_vect]\n",
    "    y_axes_1 = np.cumsum(gismo_times)\n",
    "    y_axes_2 = np.cumsum(textrank_times)\n",
    "        \n",
    "    fig = plt.figure(figsize=(10, 8))\n",
    "    ax = fig.add_subplot(1, 1, 1)\n",
    "    plt.xlabel(\"Documents\", fontsize = \"x-large\")\n",
    "    plt.ylabel(\"Logs des temps d'exécution en secondes\", fontsize = \"x-large\")\n",
    "    plt.title(\"Log des sommes cumulées des temps d'exécution\", fontsize = \"x-large\") \n",
    "\n",
    "    ax.semilogy(x_axes, y_axes_1, label=\"Gismo\")\n",
    "    ax.semilogy(x_axes, y_axes_2, label=\"TextRank\")\n",
    "\n",
    "    legend = ax.legend(loc = \"upper right\", fontsize = \"x-large\")    \n",
    "    tikzplotlib.save('rapport/courbes/tikzplotlib/multi_doc_times.tex')\n",
    "    plt.show()\n",
    "make_times_plot(GISMO_TIMES, TEXTRANK_TIMES)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-08-20T06:14:05.175708Z",
     "start_time": "2020-08-20T06:14:05.160802Z"
    }
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Taking a look at summaries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-08-19T14:46:35.323224Z",
     "start_time": "2020-08-19T14:46:35.315261Z"
    },
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Summary generated with Gsimo :\n",
      "The entire genome of IBV contains a positive-stranded ssRNA of 27 608 nucleotides, which encodes eight structural proteins and a set of nonstructural proteins that are crucial for viral RNA replication. IBV encodes 15 nonstructural proteins (nsp2-nsp16) which play crucial roles in RNA transcription and genome replication. Nonstructural protein 9 (nsp9) has been identified as a protein that is essential to viral replication because of its single-stranded RNAbinding ability.\n",
      "===========================================================================\n",
      "Summary generated with TextRank :\n",
      "The crystal structure of SARS-CoV (group 2) nsp9 revealed that the protein exists as a dimer and functions as a single-stranded RNA-binding protein (Egloff et al., 2004; Sutton et al., 2004) . Initial crystals of IBV nsp9 were observed in condition No. 15 of Hampton Research Crystal Screen, which contained 0.2 M ammonium sulfate, 0.1 M sodium cacodylate trihydrate pH 6.5, 30%(w/v) polyethylene glycol 8000.\n"
     ]
    }
   ],
   "source": [
    "print(\"Summary generated with Gsimo :\")\n",
    "print(GISMO_SUMMARIES[10])\n",
    "print(\"===========================================================================\")\n",
    "print(\"Summary generated with TextRank :\")\n",
    "print(TEXTRANK_SUMMARIES[10])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-04-15T12:13:38.888704Z",
     "start_time": "2020-04-15T12:13:38.746551Z"
    }
   },
   "source": [
    "What could be used for more complete set of measures : [nlgeval](https://github.com.cnpmjs.org/Maluuba/nlg-eval)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "start_time": "2020-06-04T08:25:26.998Z"
    }
   },
   "outputs": [],
   "source": [
    "#from nlgeval import compute_metrics\n",
    "\n",
    "#hypothesis = []\n",
    "#references = []\n",
    "#for document in DOCUMENTS:\n",
    "#        abstract = get_abstract(document)\n",
    "#        if abstract != \"\":\n",
    "#            # In order to compare two summaries of the same length\n",
    "#            num_sentences = abstract.count(\".\")\n",
    "#            #assert num_sentences == len(make_abstract_sentences(make_abstract_doc(document)))\n",
    "#            hypothesis.append(abstract)\n",
    "#            # Empty query to match the abstract that's a generic summary\n",
    "#            references.append(\" \".join(summarize_single_doc(document, \"\", num_sentences)))\n",
    "\n",
    "#metrics_dict = compute_metrics(hypothesis = hypothesis[0], \n",
    "#                               references = references[0]\n",
    "#                              )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Dynamic summarizer\n",
    "\n",
    "We want to be able to generate a new query (or queries) from each sentence of the summary first generated. The \"user\" could expand each sentence of the summary to get details on them. Each sentence of the sub-summaries could be extended in the same way and so on. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Building a recursive summary"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-09-30T07:24:30.393608Z",
     "start_time": "2020-09-30T07:24:30.389618Z"
    },
    "init_cell": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "array([6312, 4069, 1283, 5145, 2922, 2738,  501, 3413, 3039,  470, 5795,\n",
      "       1830, 5504, 1553, 3101, 4159, 6417, 5557, 6544,  518, 5920, 3001,\n",
      "       5840, 4888,   24, 5100, 1370, 4304, 5394, 6414, 3911, 3463, 4274,\n",
      "        142, 3630, 2961,  767, 3065, 2369, 2733, 3181, 1364, 2904, 3762,\n",
      "       3600, 2929, 1572, 4501, 3065, 3953, 2428, 5893,  797, 1689, 3600,\n",
      "        675, 6337, 4738, 1331, 3839, 1628, 5368,  713, 4249, 5598, 1589,\n",
      "       6026,  821, 4106, 1412, 6501,   99,  576, 2513, 2670,  663, 1181,\n",
      "       1862, 6641, 2992,  741, 1366,  290, 3554,  806, 4151, 3105, 5955,\n",
      "       4297, 4954, 4725,  725,  745, 6694, 6307, 1382,  648, 4985,  322,\n",
      "       1820])\n"
     ]
    }
   ],
   "source": [
    "from summarizer.building_summary import make_tree\n",
    "\n",
    "import numpy as np\n",
    "import time\n",
    "from pprint import pprint\n",
    "from summarizer.simplified_documents import get_abstract\n",
    "# To get the time : time.clock()\n",
    "\n",
    "rand_indexes = np.random.randint(low = 0, high = len(DOCUMENTS), size = 100)\n",
    "pprint(rand_indexes)\n",
    "\n",
    "DOC_LIST = [DOCUMENTS[i] for i in rand_indexes]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-06-16T09:39:54.517446Z",
     "start_time": "2020-06-16T09:39:54.510534Z"
    }
   },
   "outputs": [],
   "source": [
    "from summarizer.visualizer import (boldize, html, make_css, make_html) # imports ds l'ordre alphabetique \n",
    "from summarizer.visualizer import FormatKeywords\n",
    "def make_html(node :dict, pairs = None) -> str:\n",
    "    def format_text(text :str):\n",
    "        for (node_to_keywords, callback) in pairs:\n",
    "            keywords = node_to_keywords(node)\n",
    "            format_keywords = FormatKeywords(keywords, callback)\n",
    "            text = format_keywords(text)\n",
    "        return text\n",
    "\n",
    "    text = node.get(\"text\")\n",
    "    return \\\n",
    "        \"\"\"\n",
    "        <details>\n",
    "          <summary>%(text)s</summary>\n",
    "          <div class=\"children\">\n",
    "              %(children)s\n",
    "          </div>\n",
    "        </details>\n",
    "        \"\"\" % {\n",
    "            \"text\"     : (\n",
    "                \"\"   if not text  else\n",
    "                text if not pairs else\n",
    "                format_text(text)\n",
    "            ),\n",
    "            \"children\" : \"\".join([\n",
    "                make_html(child, pairs)\n",
    "                for child in node.get(\"children\", list())\n",
    "            ]),\n",
    "            \"url\" : node.get(\"url\")\n",
    "        }"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-06-18T12:11:31.123730Z",
     "start_time": "2020-06-18T12:10:25.058586Z"
    },
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "def make_tree(\n",
    "    documents :list,\n",
    "    query :str = \"\",\n",
    "    depth :int = 1,\n",
    "    trees :list = list(),\n",
    "    num_documents :int = None,\n",
    "    num_sentences :int = None,\n",
    "    embedding :Embedding = None,\n",
    "    used_sentences :set = None\n",
    ") -> list:\n",
    "    \"\"\"\n",
    "    Builds a hierarchical summary. \n",
    "   Args:\n",
    "        documents: A list of dict corresponding to documents, only the values of the \"content\" key will be summarized.\n",
    "        query: A string.\n",
    "        depth: An int giving the depth of the summary (depth one is a sequential summary).\n",
    "        trees: A list of dict being completed, necessary for the recursivity. \n",
    "        num_documents: An int corresponding to the number of top documents to be taking into account for the summary. \n",
    "        num_sentences: An int corresponding of the number of sentences wanted in the summary.\n",
    "        embedding: An Embedding fitted on a bigger corpus than documents.\n",
    "        used_sentences: A set of \"forbidden\" sentences.\n",
    "    Returns:\n",
    "        A list of dict corresponding to the hierarchical summary\n",
    "    \"\"\"\n",
    "    if depth == 0:\n",
    "        return trees\n",
    "    else:\n",
    "        if used_sentences == None:\n",
    "            used_sentences = set()\n",
    "            \n",
    "        (children, keywords) = summarize(\n",
    "            documents = documents,\n",
    "            query = query,\n",
    "            num_documents = 10,\n",
    "            num_sentences = num_sentences,\n",
    "            embedding = embedding,\n",
    "            is_documents_embedding= True,\n",
    "            used_sentences = used_sentences,\n",
    "            weight_s = 1,\n",
    "            itf = False\n",
    "        )        \n",
    "        used_sentences |= set(children)\n",
    "        return [{\n",
    "            \"text\" : child,\n",
    "            \"current_keywords\" : keywords,\n",
    "            \"children\" : make_tree(\n",
    "                trees = trees,\n",
    "                depth = depth-1,\n",
    "                documents = documents,\n",
    "                query = \" \".join([query, child]),\n",
    "                num_sentences = num_sentences,\n",
    "                embedding = embedding,\n",
    "                used_sentences = used_sentences\n",
    "            )        \n",
    "        } for child in children]\n",
    "\n",
    "\n",
    "\n",
    "test = make_tree(\n",
    "    documents = DOCUMENTS,\n",
    "    query = \"vaccine\",\n",
    "    depth = 3,\n",
    "    num_documents = 10,\n",
    "    num_sentences = 5,\n",
    "    embedding = EMBEDDING,\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-06-18T12:11:31.231790Z",
     "start_time": "2020-06-18T12:11:31.125200Z"
    },
    "scrolled": false
   },
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'html' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-14-06b4f5f5ca1b>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mhtml\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmake_css\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcolor\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"black\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbackground\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"#9edcf7\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mtree\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mtest\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m     html(\n\u001b[1;32m      4\u001b[0m         make_html(\n\u001b[1;32m      5\u001b[0m             \u001b[0mtree\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'html' is not defined"
     ]
    }
   ],
   "source": [
    "html(make_css(color = \"black\", background = \"#9edcf7\"))\n",
    "for tree in test:\n",
    "    html(\n",
    "        make_html(\n",
    "            tree,\n",
    "            [(\n",
    "                # Pair of functions\n",
    "                lambda node: node.get(\"current_keywords\"),\n",
    "                boldize\n",
    "            )] \n",
    "        )\n",
    "    )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-06-16T09:18:19.122633Z",
     "start_time": "2020-06-16T09:12:53.008Z"
    },
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "GISMO_TIMES_DEPTH = {\"depth 1\" : list(), \"depth 2\" : list(), \"depth 3\" : list()}\n",
    "for document in DOC_LIST:\n",
    "    for depth in range(1, 4):\n",
    "        start_time = time.clock()\n",
    "        test = make_tree(\n",
    "            trees = [],\n",
    "            depth = depth,\n",
    "            documents = [document],\n",
    "            num_sentences = 3,\n",
    "            query = \"\",\n",
    "            embedding = EMBEDDING\n",
    "        )\n",
    "        GISMO_TIMES_DEPTH[\"depth %d\" % depth].append(time.clock() - start_time) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-06-04T09:27:38.892098Z",
     "start_time": "2020-06-04T09:27:38.678483Z"
    },
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7faebaa05048>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "x_vect = [i for i in range(0, len(TEXTRANK_TIMES))]\n",
    "x_axes = [(100 / len(TEXTRANK_TIMES)) * i for i in x_vect]\n",
    "\n",
    "TEXTRANK_TIMES.sort()\n",
    "GISMO_TIMES_DEPTH[\"depth 1\"].sort()\n",
    "GISMO_TIMES_DEPTH[\"depth 2\"].sort()\n",
    "GISMO_TIMES_DEPTH[\"depth 3\"].sort()\n",
    "y_axes_1 = np.cumsum(TEXTRANK_TIMES)\n",
    "y_axes_d1 = np.cumsum(GISMO_TIMES_DEPTH[\"depth 1\"])\n",
    "y_axes_d2 = np.cumsum(GISMO_TIMES_DEPTH[\"depth 2\"])\n",
    "y_axes_d3 = np.cumsum(GISMO_TIMES_DEPTH[\"depth 3\"])\n",
    "\n",
    "fig = plt.figure(figsize=(10, 8))\n",
    "ax = fig.add_subplot(1, 1, 1)\n",
    "plt.xlabel(\"Documents percentage\", fontsize = \"x-large\")\n",
    "plt.ylabel(\"Execution time in seconds\", fontsize = \"x-large\")\n",
    "plt.title(\"Cumulative sum of execution times per summary\", fontsize = \"x-large\")\n",
    "\n",
    "ax.plot(x_axes, y_axes_1, label=\"TextRank summary (depth 1)\")\n",
    "ax.plot(x_axes, y_axes_d1, label=\"Hierarchical summary with depth 1\")\n",
    "ax.plot(x_axes, y_axes_d2, label=\"Hierarchical summary with depth 2\")\n",
    "ax.plot(x_axes, y_axes_d3, label=\"Hierarchical summary with depth 3\")\n",
    "\n",
    "legend = ax.legend(loc = \"upper left\", fontsize = \"x-large\")  \n",
    "path = \"results/time/execution_wrt_depth.svg\"\n",
    "plt.savefig(path)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "celltoolbar": "Initialization Cell",
  "kernelspec": {
   "display_name": ".env",
   "language": "python",
   "name": ".env"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.9"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
